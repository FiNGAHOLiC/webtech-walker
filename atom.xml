<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Webtech Walker]]></title>
  <link href="http://webtech-walker.com/atom.xml" rel="self"/>
  <link href="http://webtech-walker.com/"/>
  <updated>2012-12-19T13:02:46+09:00</updated>
  <id>http://webtech-walker.com/</id>
  <author>
    <name><![CDATA[Kazuhito Hokamura]]></name>
  </author>

  
  <entry>
    <title type="html"><![CDATA[Backbone.js 0.9.9 の変更点]]></title>
    <link href="http://webtech-walker.com/archive/2012/12/backbone_0.9.9.html"/>
    <updated>2012-12-19T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/12/backbone_0.9.9</id>
    <content type="html"><![CDATA[<p>先週Backbone.jsの0.9.9がリリースされてけっこう変更点多いのでChange Logに書いてあるやつを簡単にまとめときます。</p>

<p><a href="http://backbonejs.org/#changelog">Backbone.js - Change Log</a></p>

<p>また、先日清水さん（<a href="https://twitter.com/tori3_jp">@tori3_jp</a>）が以下のようなエントリを書いていて、いくつか重複する点がありますので、こちらも参照してください。</p>

<p><a href="http://tech.naver.jp/blog/?p=2342">Backbone.js 1.0に向けての変更点 « NAVER Engineers’ Blog</a></p>

<h2 id="events">Events関連</h2>

<ul>
  <li>Eventsに<code>listenTo</code>と<code>stopListening</code>が追加されました。清水さんのエントリの追記の部分に詳しく書いてあります。</li>
  <li><code>Backbone</code>オブジェクトが<code>Events</code>を継承するようになりました。<code>Backbone.on('foo')</code>みたいなグローバルなイベントが貼れるみたいです。</li>
  <li>jQueryの<code>one</code>メソッドのように、一回だけイベントハンドラを実行する<code>once</code>がEventsに追加されました。</li>
  <li>jQueryのように<code>obj.on({click: action})</code>みたいなイベントの指定ができるようになりました。</li>
</ul>

<h2 id="modelcollection">Model、Collection関連</h2>

<ul>
  <li>collectionの<code>add</code>メソッドのオプションで<code>{merge: true}</code>が指定されていた場合、既存のモデルを更新するようになりました。これも清水さんのエントリに詳しく書いてあります。</li>
  <li>collectionに<code>update</code>メソッドが追加されました。詳しくは<a href="http://backbonejs.org/#Collection-update">ドキュメント</a>を。</li>
  <li>collectionの<code>reset</code>イベントハンドラの引数の<code>options</code>に<code>previousModels</code>という<code>reset</code>される前のモデルのリストが渡されるようになりました。</li>
  <li>バリデーションが<code>silent</code>オプションが<code>true</code>のときも実行されるようになりました。また、それに伴って<code>isValid</code>メソッドがなくなりました。</li>
  <li>Collectionで使えるUnderscore.jsのメソッドにエイリアスのメソッド名も使えるようになりました。（<code>collect</code>, <code>inject</code>, <code>foldl</code>, <code>foldr</code>, <code>head</code>, <code>tail</code>, <code>take</code>など）</li>
  <li><code>getByCid</code>が削除され、<code>get</code>メソッドで<code>id</code>と<code>cid</code>の両方を探すようになりました。</li>
  <li>Collectionの<code>sort</code>メソッドが、<code>reset</code>イベントの代わりに<code>sort</code>イベントを発火するようになりました。</li>
  <li>modelの<code>isNew</code>が<code>true</code>のときに<code>destroy</code>を呼んだら<code>false</code>を返すようになりました（って書いてあるけど実際は0.9.2からこの挙動です）。</li>
  <li>modelやcollectionでフェッチした後、定義した全ての<code>parse</code>メソッドが実行されるようになりました。（これについてはコードも呼んだけど、どう変わったのかよくわからなかったので原文載せときます）</li>
</ul>

<blockquote>
  <p>After fetching a model or a collection, all defined <code>parse</code> functions will now be run. So fetching a collection and getting back new models could cause both the collection to parse the list, and then each model to be parsed in turn, if you have both functions defined.</p>
</blockquote>

<p>collectionでfetchしたときに新しいmodelがあったらそのmodelに対しても<code>parse</code>が呼ばれるみたいな感じな気がするんだけど0.9.2のころからそうだったしなあという感じでよくわかりません。</p>

<h2 id="view">View関連</h2>

<ul>
  <li>Viewの<code>options</code>、<code>el</code>、<code>tagName</code>に関数を指定すると実行時に評価されるようになりました。</li>
</ul>

<h2 id="sync">Sync関連</h2>

<ul>
  <li>HTTPの<code>PATCH</code>メソッドをサポートするようになりました。<code>save</code>メソッドのオプションで<code>{patch: true}</code>にすると<code>PUT</code>のところが<code>PATCH</code>になります。<br />
<code>PATCH</code>メソッドについては以下のエントリがわかりやすいです。<br />
<a href="http://d.hatena.ne.jp/ZIGOROu/20120211/1328982756">PATCH メソッド、新しい HTTP Status Code - Yet Another Hackadelic</a></li>
  <li><code>Backbone.sync</code>に<code>request</code>イベントが追加されました（実際にはModelやCollectionに対して発火します）。サーバーへのリクエストを開始したときに発火します。</li>
  <li><code>emulateHTTP</code>と<code>emulateJSON</code>がメソッド呼び出し時のオプションとして指定できるようになりました。</li>
  <li>Backbone.ajaxというフックが追加されました。この関数を上書きすることで<code>Backbone.sync</code>のAjax部分の動作を変更できます。デフォルトでは<code>Backbone.$.ajax</code>が使われます。</li>
</ul>

<h2 id="router">Router関連</h2>

<ul>
  <li><code>Router</code>のURLにオプションを指定できるようになりました。<code>docs/:section(/:subsection)</code>のような感じで<code>()</code>の部分はあってもなくてもいいようなURLが指定できます。</li>
  <li>ルーターの定義のところで、先頭と末尾のスラッシュの正規化のバグを修正しました。</li>
</ul>

<h2 id="section">その他</h2>

<ul>
  <li>DOM操作やAjaxの呼び出しを行うためのjQuery互換ライブラリの差し替えを行うのに<code>setDomLibrary</code>というメソッドが用意されていましたが、これが削除され、<code>Backbone.$</code>を差し替えるようになりました。</li>
  <li><code>Backbone.wrapError</code>が削除されました。（現時点でgh-pagesブランチには乗ってないけど<a href="https://github.com/documentcloud/backbone/commit/5a4d405f640ac4b843e8c3ffd6eb0ae52d7f9b4a">masterブランチのコミット</a>にあったので掲載）</li>
</ul>

<p>以上ですが、けっこう多いですね。1.0でまたどれくらい変わるかがきになるところです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.Modelのattributesにオブジェクト入れるときの注意]]></title>
    <link href="http://webtech-walker.com/archive/2012/12/backbone_model_object.html"/>
    <updated>2012-12-15T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/12/backbone_model_object</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/15">Backbone.js Advent Calendar</a>の15日目です。軽めにいきます。</p>

<p>Backbone.Modelの<code>attributes</code>にオブジェクトを設定するときの注意点など。<code>attributes</code>は<code>set</code>とかで設定される値をオブジェクトして持っているやつです。</p>

<p>まず次のように<code>set</code>で<code>attributes</code>を設定します。</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">();</span>
<span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="s1">&#39;fuga&#39;</span><span class="p">);</span>
<span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span> <span class="p">});</span>
</code></pre>
</div>

<p>このように<code>hoge</code>には文字列、<code>foo</code>にはオブジェクトを設定しました。そして<code>toJSON</code>で<code>attributes</code>を取得して値を更新してみます。</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">();</span>
<span class="nx">attrs</span><span class="p">.</span><span class="nx">hoge</span> <span class="o">=</span> <span class="s1">&#39;new fuga&#39;</span><span class="p">;</span>
<span class="nx">attrs</span><span class="p">.</span><span class="nx">foo</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="s1">&#39;new baz&#39;</span><span class="p">;</span>
</code></pre>
</div>

<p>そして<code>attributes</code>の中身を見てみると・・</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span>
<span class="c1">// =&gt; { hoge: &#39;fuga&#39;, foo: { bar: &#39;new baz&#39; } }</span>
</code></pre>
</div>

<p><code>hoge</code>の値は変わってないのに<code>foo.bar</code>の値が変わってますね。どうしてこうなった。</p>

<p>と、まあこういう問題があるわけです。</p>

<p>では原因を見て行きましょう。まず、<code>toJSON</code>の実装は次のようになっています。</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">toJSON</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span>
<span class="p">},</span>
</code></pre>
</div>

<p>このように<code>attributes</code>を<code>_.clone</code>してるだけです。<code>_.clone</code>してるということは参照ではなくてオブジェクトのコピーが返りそうな雰囲気です。コピーが返るということは返ってきた値を変更しても元のオブジェクトには影響しないはず・・。</p>

<p>なんですが、実は<code>_.close</code>はネストしたオブジェクトに対応しておらず、ネストしている場合はそのまま参照がコピーされるのです。なんてこったい＼(^o^)／</p>

<p>なので<code>hoge</code>の値は変更しても元の値は影響を受けておらず、<code>foo.bar</code>の値を変更したら元のオブジェクトにも影響がでてしまったというわけ。</p>

<p>ちなみに<code>_.close</code>の実装は次のようになってて</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">_</span><span class="p">.</span><span class="nx">clone</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">obj</span><span class="p">))</span> <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">?</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span> <span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span> <span class="nx">obj</span><span class="p">);</span>
<span class="p">};</span>
</code></pre>
</div>

<p><code>_.extend({}, obj)</code>を返してるだけなので元凶は<code>_.extend</code>だったりします。<code>_.extend</code>は次のようにネストしたオブジェクトに対応してないのがわかります。</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="p">{</span> <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span> <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="p">{</span> <span class="nx">hoge</span><span class="o">:</span> <span class="s1">&#39;fuga&#39;</span> <span class="p">}</span>
<span class="p">};</span>

<span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// { foo: { hoge: &#39;fuga&#39; } }</span>
</code></pre>
</div>

<p>この問題を解決できるのは我らがjQuery大先生です。jQueryの<code>$.extend</code>は第一引数を<code>true</code>にすることでネストしたオブジェクトにも対応できます。</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="p">{</span> <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span> <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="p">{</span> <span class="nx">hoge</span><span class="o">:</span> <span class="s1">&#39;fuga&#39;</span> <span class="p">}</span>
<span class="p">};</span>

<span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// { foo: { bar: &#39;baz&#39;, hoge: &#39;fuga&#39; } }</span>
</code></pre>
</div>

<p>すばらしいですね。これを利用して次のように<code>toJSON</code>を上書きします。</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="nx">toJSON</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="p">{},</span> <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>
</div>

<p>これで大丈夫なはず。</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">();</span>
<span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="s1">&#39;fuga&#39;</span><span class="p">);</span>
<span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span> <span class="p">});</span>

<span class="kd">var</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">();</span>
<span class="nx">attrs</span><span class="p">.</span><span class="nx">hoge</span> <span class="o">=</span> <span class="s1">&#39;new fuga&#39;</span><span class="p">;</span>
<span class="nx">attrs</span><span class="p">.</span><span class="nx">foo</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="s1">&#39;new baz&#39;</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span>
<span class="c1">// =&gt; { hoge: &#39;fuga&#39;, foo: { bar: &#39;baz&#39; } }</span>
</code></pre>
</div>

<p>おっけーですねー。すばらしいですねー。jQueryまじイノベーティブです。</p>

<p>以上、<del>jQuery</del><ins>Backbone.js</ins> Advent Calendarでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsでNode.jsとクライアントサイドのロジックをイケてる感じで共通化する]]></title>
    <link href="http://webtech-walker.com/archive/2012/12/backbone_node_common.html"/>
    <updated>2012-12-11T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/12/backbone_node_common</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/15">Backbone.js Advent Calendar</a>の12日目です。</p>

<p>Backbone.jsを使ってNode.jsとクライアントサイドのJavaScriptでロジックを共有する方法について書いてみます。</p>

<p>Node.jsといえばチャット。チャットといえばSocket.IOということでSocket.IOを使ったチャットを例にしてみます。</p>

<p>例えばチャットの一回の文字列の上限を140文字にしたいとします。その場合クライアント側でもサーバー側でも同じバリデーションのロジックを実装するのは面倒ですし、上限値が変更になったときに2箇所変更するのはイケてないですね。そこでBackbone.jsを使ってその部分のロジックを共通化する方法を考えてみます。</p>

<p>Backbone.jsはnpmでインストールできるのでまずはBackbone.jsとSocket.IOをインストールします。</p>

<pre><code>$ npm install backbone socket.io
</code></pre>

<p>次に、サーバーサイドとクライアントサイドの共通のロジックを記述するmodelBase.jsというモデルを作ります。</p>

<div class="highlight"><pre><code class="javascript"><span class="c1">// modelBase.js</span>

<span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">Backbone</span> <span class="o">=</span> <span class="nx">root</span><span class="p">.</span><span class="nx">Backbone</span> <span class="o">||</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;backbone&#39;</span><span class="p">);</span>

  <span class="kd">var</span> <span class="nx">TEXT_LIMIT</span> <span class="o">=</span> <span class="mi">140</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">MessageBase</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="nx">TEXT_LIMIT</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;text is too long&#39;</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">},</span>

    <span class="c1">// その他共通のロジック</span>
  <span class="p">});</span>

  <span class="kd">var</span> <span class="nx">MessagesBase</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="c1">// 共通のロジック</span>
  <span class="p">});</span>

  <span class="cm">/**</span>
<span class="cm">   * Expose</span>
<span class="cm">   */</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">MessagesBase</span> <span class="o">=</span> <span class="nx">MessagesBase</span><span class="p">;</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">MessageBase</span> <span class="o">=</span> <span class="nx">MessageBase</span><span class="p">;</span>
<span class="p">})(</span><span class="k">this</span><span class="p">);</span>
</code></pre>
</div>

<p>イケてるポイントはここや</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">Backbone</span> <span class="o">=</span> <span class="nx">root</span><span class="p">.</span><span class="nx">Backbone</span> <span class="o">||</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;backbone&#39;</span><span class="p">);</span>
</code></pre>
</div>

<p>ここでサーバーサイド、クライアントサイドのどちらでも使えるようにしてるところです。</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">root</span><span class="p">.</span><span class="nx">MessagesBase</span> <span class="o">=</span> <span class="nx">MessagesBase</span><span class="p">;</span>
<span class="nx">root</span><span class="p">.</span><span class="nx">MessageBase</span> <span class="o">=</span> <span class="nx">MessageBase</span><span class="p">;</span>
</code></pre>
</div>

<p>次にNode.js側でこのmodelBase.jsを継承したmodel.jsをつくります。</p>

<div class="highlight"><pre><code class="javascript"><span class="c1">// server: model.js</span>
<span class="kd">var</span> <span class="nx">modelBase</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./modelBase&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">Message</span> <span class="o">=</span> <span class="nx">modelBase</span><span class="p">.</span><span class="nx">MessageBase</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="c1">// サーバー側のロジック</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">Messages</span> <span class="o">=</span> <span class="nx">modelBase</span><span class="p">.</span><span class="nx">MessagesBase</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="nx">model</span><span class="o">:</span> <span class="nx">Message</span>

  <span class="c1">// サーバー側のロジック</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">Messages</span> <span class="o">=</span> <span class="nx">Messages</span><span class="p">;</span>
</code></pre>
</div>

<p>そしてイケてるチャットアプリのapp.jsでmodel.jsで定義した<code>Messages</code>を使ってチャットのメッセージを管理します。</p>

<div class="highlight"><pre><code class="javascript"><span class="c1">// server: app.js</span>

<span class="kd">var</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3030</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">Messages</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./model&#39;</span><span class="p">).</span><span class="nx">Messages</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">messages</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Messages</span><span class="p">();</span>

<span class="c1">// modelBaseを静的ファイルとして配信</span>
<span class="nx">io</span><span class="p">.</span><span class="kr">static</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;/modelBase.js&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">file</span><span class="o">:</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/modelBase.js&#39;</span> <span class="p">});</span>

<span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// なんかチャットのロジック</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;create&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// バリデーションが通ったらbroadcast（pushはバリデーションが通らなかったらfalseを返す）</span>
    <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="nx">messages</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">text</span> <span class="p">};</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">socket</span><span class="p">.</span><span class="nx">broadcast</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;update&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">());</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>

<p>ここでのイケてるポイントはこんな感じでmodelBase.jsを配信してることですね。</p>

<div class="highlight"><pre><code class="javascript"><span class="c1">// modelBaseを静的ファイルとして配信</span>
<span class="nx">io</span><span class="p">.</span><span class="kr">static</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;/modelBase.js&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">file</span><span class="o">:</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/modelBase.js&#39;</span> <span class="p">});</span>
</code></pre>
</div>

<p>expressと併用してる場合などはそっちで配信してもいいと思います。</p>

<p>そうするとクライアント側では、次のようにmodelBase.jsを読み込むことができます。（Backbone.jsとかUnderscore.jsとかはこの前に読み込んでる前提）</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://localhost:3030/socket.io/socket.io.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://localhost:3030/socket.io/modelBase.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre>
</div>

<p>そうしたらクライアント側も同じようにmodelBaseを継承してモデルを実装することができます。</p>

<div class="highlight"><pre><code class="javascript"><span class="c1">// client: model.js</span>
<span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">Message</span> <span class="o">=</span> <span class="nx">root</span><span class="p">.</span><span class="nx">MessageBase</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="c1">// クライアント側のロジック</span>
  <span class="p">});</span>

  <span class="kd">var</span> <span class="nx">Messages</span> <span class="o">=</span> <span class="nx">root</span><span class="p">.</span><span class="nx">MessagesBase</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="nx">model</span><span class="o">:</span> <span class="nx">Message</span><span class="p">,</span>

    <span class="c1">// クライアント側のロジック</span>
  <span class="p">});</span>

  <span class="nx">root</span><span class="p">.</span><span class="nx">Messages</span> <span class="o">=</span> <span class="nx">Messages</span><span class="p">;</span>
<span class="p">})(</span><span class="k">this</span><span class="p">);</span>
</code></pre>
</div>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">messages</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Messages</span><span class="p">();</span>

<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>

  <span class="c1">// createしたらイケてる感じでsocket.emitするようにしとく</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">messages</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[type=&quot;text&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="p">}))</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;バリデーションエラー！&#39;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>
</div>

<p>このように簡単にロジックを共通化することができます。イケてますね。</p>

<p>また、Backbone.Syncをサーバー側ではRedisやmongodb、クライアント側ではsocketを使った処理に差し替えればさらにイケてるチャットアプリにすることができそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nodebrewでバイナリからインストールできるようにした]]></title>
    <link href="http://webtech-walker.com/archive/2012/12/nodebrew_update.html"/>
    <updated>2012-12-10T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/12/nodebrew_update</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/hokaccha/nodebrew">nodebrew</a>の0.6.0をリリースしました。<code>install-binary</code>というコマンドを追加しまして、コンパイル済みのバイナリからインストールできるようにしました。</p>

<p>バイナリのファイルはNode.jsのv0.8.6以降で配布されるようになったので、それ以前のバージョンはインストールできません。Mac OSX、Linux、Solaris用のがそれぞれ32bitと64bitのものが用意されていて、nodebrewがアーキテクチャから自動で判別してとってくるようにしています。OSXとUbuntuくらいでしか試してないので動かなかった場合は報告ください。</p>

<p>こんな感じです。</p>

<pre><code>$ nodebrew install-binary v0.8.6
fetch: http://nodejs.org/dist/v0.8.6/node-v0.8.6-darwin-x64.tar.gz
######################################################################## 100.0%
install success
</code></pre>

<p>これまでコンパイルが必要だったのでインストールに時間がかかっていましたが、バイナリだとダウンロードして展開するだけなんでちょっぱやで終わります。</p>

<p>最初は<code>install</code>コマンドと統合しようと思ったんだけどいきなり統合するのもアレなのでひとまず様子見で別コマンドにしてます。将来的には<code>install</code>コマンドに統合してオプションとかで切り替えられるようにするかもしれません。</p>

<p>あと、人知れずちょっと前のバージョンアップで<a href="https://twitter.com/hide_o_55">@hide_o_55</a>さんが実装してくれた<code>migrate-package</code>というコマンドが入っています。これは<code>npm install -g</code>でグローバルにインストールしたモジュールを移行してくれるコマンドです。</p>

<pre><code>$ nodebrew migrate-package v0.6.4
</code></pre>

<p>とかやるとv0.6.4でグローバルにインストールされているモジュールをカレントのバージョンにも<code>npm install -g</code>でインストールしてくれます。便利。</p>

<p><code>nodebrew selfupdate</code>コマンドでアップデートできるのでぜひ使ってみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryの非推奨な機能]]></title>
    <link href="http://webtech-walker.com/archive/2012/12/jquery_deprecated.html"/>
    <updated>2012-12-03T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/12/jquery_deprecated</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/29">軽めのjQuery Advent Calendar 2012</a> 3日目の記事です。jQueryのDeprecated（非推奨）な機能をいくつか紹介します。</p>

<h2 id="browser">$.browser</h2>

<p>これは有名ですね。ブラウザで分岐するんじゃなくて機能があるかないかで分岐するのがいいから$.supportを使えよって話です。</p>

<p>まあIE6だけで起きるバグとかのためにブラウザ判定するのはありだと思いまけどjQuery的には$.browserは非推奨らしいです。</p>

<h2 id="live">.live()</h2>

<p><code>.live()</code>は非推奨で<code>.on()</code>とか<code>.delegate()</code>で同じ事でできるのでこっちを使うのを推奨してるみたいです。</p>

<h2 id="size">.size()</h2>

<p><code>.size()</code>はjQueryオブジェクトの要素数を返すメソッドですが、これが非推奨な理由は<code>.size()</code>と<code>.length</code>は同じで<code>.size()</code>のほうが関数呼び出しのオーバーヘッドがかかるから<code>.length</code>のほうがいいよってことらしいです。</p>

<h2 id="checkboxradiosubmit">:checkbox、:radio、:submitなどのセレクタ</h2>

<p>checkboxの要素を探したりするのに</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;:checkbox&#39;</span><span class="p">);</span>
</code></pre>
</div>

<p>とかいうjQueryの独自セレクタが使えるわけですが、これも実は非推奨です。</p>

<p>なぜかというと、次のように書いても同じで、</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;[type=checkbox]&#39;</span><span class="p">)</span>
</code></pre>
</div>

<p><code>:checkbox</code>は独自セレクタなのに対して<code>[type=checkbox]</code>は<code>querySelector</code>などでパースできるためこっちのほうが早いからです。</p>

<p><code>:button</code>、<code>:file</code>、<code>:image</code>なども同じ理由で非推奨です。</p>

<h2 id="section">その他の非推奨な機能</h2>

<p>Deprecatedな機能は他にもいっぱいあって、一覧は以下に全部のってます。</p>

<p><a href="http://api.jquery.com/category/deprecated/">Deprecated – jQuery API</a></p>

<p>軽めなんでドキュメント見ればすぐわかる内容のエントリでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近のLessのextendの進捗]]></title>
    <link href="http://webtech-walker.com/archive/2012/12/less_extend.html"/>
    <updated>2012-12-01T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/12/less_extend</id>
    <content type="html"><![CDATA[<p>今年も始まりましたAdvent Calendar。このエントリーは<a href="http://www.adventar.org/calendars/1">CSS Preprocessor Advent Calendar 2012</a>の一日目です。</p>

<p>去年は<a href="http://atnd.org/events/21919">Less &amp; Sass Advent calendar</a>というのをやりましたが、今年はSassやLessだけじゃなく、Stylusなども含めてCSS Preprocessorというくくりにしてみました。まだ最後のほうに空きがあるので我こそはと思われる方はぜひ参加してみてください。</p>

<p>また、Advent Calendarとは関係ないですが、<a href="https://groups.google.com/forum/?hl=ja&amp;fromgroups#!forum/css-preprocessor-jp">CSS Preprocessor JP</a>というグループをつくったので興味がある人はぜひ参加してみてください。Sassのインストールの仕方がわからないとか、最近はどういうのが流行ってるかなど意見交換の場にしてもらえればと思っています。きっとAdvent Calendarの参加者の人たちあたりがビシッと教えてくれるはずです。</p>

<p>さて本題。去年のAdvent Calendarのときに<a href="http://d.hatena.ne.jp/hokaccha/20111214/1323821463">Lessにextendを実装してみた</a>んですが、しばらくとりこまれる気配がなくて、最近になって開発がさかんになり、1_4_0ブランチに取り込まれました。</p>

<p><a href="https://github.com/cloudhead/less.js/tree/1_4_0">cloudhead/less.js at 1_4_0</a></p>

<p>取り込まれてからも<a href="https://github.com/cloudhead/less.js/pull/509">シンタックスに関する議論</a>が活発に続いており、紆余曲折ありましたが、今は以下の様なシンタックスに落ち着いたようです。（が、まだ変わる可能性はあります）</p>

<div class="highlight"><pre><code class="css"><span class="nc">.foo</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.bar</span> <span class="p">{</span>
  <span class="o">&amp;:</span><span class="n">extend</span><span class="p">(</span><span class="o">.</span><span class="n">foo</span><span class="p">);</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">13px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>これをコンパイルすると次のようになります。</p>

<div class="highlight"><pre><code class="css"><span class="nc">.foo</span><span class="o">,</span>
<span class="nc">.bar</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.bar</span> <span class="p">{</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">13px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>最初僕が実装したときは<code>+.foo</code>みたいなシンタックスだったんですが、隣接セレクタみたいでわかりにくいということで<code>++.foo</code>になって、それもやっぱ微妙だねということで<code>&amp;:extend(.foo)</code>のようになったみたいです。</p>

<p>たしかにわかりやすいとは思うけどLessっぽくはないなあと思いつつ、Lessらしさが何なのか語れるほどLessを使ってないので議論には参加してません。</p>

<p>このくらいライトな記事でもいいのでぜひAdvent Calendarに参加してみてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flipsnap.jsでIE10のPointer Eventsに対応した]]></title>
    <link href="http://webtech-walker.com/archive/2012/11/flipsnap_ie10_pointerevents.html"/>
    <updated>2012-11-16T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/11/flipsnap_ie10_pointerevents</id>
    <content type="html"><![CDATA[<p>flipsnap.jsをWindows8のIE10のタッチで動くようにしました。</p>

<p><a href="http://pxgrid.github.com/js-flipsnap/">flipsnap.js</a></p>

<p>思ったより簡単に対応できました。diffはこんな感じ。</p>

<p><a href="https://github.com/pxgrid/js-flipsnap/commit/0524fefdbd8e2b02625a00fada9e2d3f9c73b2ef">IE10 for touch device support. Fix #13 · 0524fef · pxgrid/js-flipsnap</a></p>

<p>IE10はiOSやAndroidのように<code>touchstart</code>や<code>touchmove</code>のようなタッチイベントが用意されておらず、代わりにタッチした際に、pointerイベントというイベントが発火します。</p>

<ul>
  <li><a href="http://www.w3.org/Submission/pointer-events/">Pointer Events Specification</a></li>
  <li><a href="http://blogs.msdn.com/b/ie/archive/2011/09/20/touch-input-for-ie10-and-metro-style-apps.aspx">Touch Input for IE10 and Metro style Apps - IEBlog - Site Home - MSDN Blogs</a></li>
</ul>

<p>まだ<code>MSPointerDown</code>のように<code>MS</code>というprefixがついています。</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;MSPointerDown&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// タッチが始まった時の処理</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>

<span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;MSPointerMove&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// タッチが動いている時の処理</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>

<span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;MSPointerUp&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// タッチが終わった時の処理</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</code></pre>
</div>

<p>基本的にはmouseイベントやtouchイベントと同じように使えるので、イベント名だけ変更すれば対応はできます。また、<code>window.navigator.msPointerEnabled</code>の値を見てpointerイベントが使用可能かどうかを判断することができます。</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">support</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">mspointer</span><span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">msPointerEnabled</span><span class="p">,</span>
  <span class="nx">touch</span><span class="o">:</span> <span class="s1">&#39;ontouchstart&#39;</span> <span class="k">in</span> <span class="nb">window</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">touchStartEvent</span> <span class="o">=</span>
    <span class="nx">support</span><span class="p">.</span><span class="nx">mspointer</span> <span class="o">?</span> <span class="s1">&#39;MSPointerDown&#39;</span> <span class="o">:</span>
    <span class="nx">support</span><span class="p">.</span><span class="nx">touch</span> <span class="o">?</span> <span class="s1">&#39;touchstart&#39;</span> <span class="o">:</span>
    <span class="s1">&#39;mousedown&#39;</span><span class="p">;</span>

<span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">touchStartEvent</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// タッチが始まった時の処理</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</code></pre>
</div>

<p>また、1点注意が必要で、CSSで<code>-ms-touch-action: none;</code>というのを指定しないとタッチしたときにネイティブのスクロールなどが優先されてpointerイベントがちゃんと発火しません。JavaScriptからこのプロパティを設定するには次のようにします。</p>

<div class="highlight"><pre><code class="javascript"><span class="k">if</span> <span class="p">(</span><span class="nx">support</span><span class="p">.</span><span class="nx">mspointer</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">msTouchAction</span> <span class="o">=</span> <span class="s1">&#39;none&#39;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>CSSでやるならこうです。</p>

<div class="highlight"><pre><code class="css"><span class="nf">#element</span> <span class="p">{</span>
  <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">action</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>今回のflipsnap.jsでの対応は将来的にまだpointerイベントがどうなるかわからないので<code>MS</code>のプレフィックス限定で対応しています。将来的にプレフィックスが外れたり他のブラウザでも対応が始まった場合はその都度対応していく予定です。</p>

<p>また、Windows8のタッチ対応端末で確認したところ、Chromeはtouchイベント、Firefoxはmouseイベントが発火していたのでそのままで使えてました。なかなかタッチイベントまわりカオスな状況ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Calendarの登録サイトつくりました]]></title>
    <link href="http://webtech-walker.com/archive/2012/11/adventar.html"/>
    <updated>2012-11-01T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/11/adventar</id>
    <content type="html"><![CDATA[<p>もうすぐAdvent Calendarの季節なわけですが、いかがお過ごしてしょうか。僕も毎年なんらかのAdvent Calendarに参加したり、去年はSass Less Advent Calendarなどを立てたりしました。</p>

<p>最近はけっこうATNDでAdvent Calendarを募集することが多いみたいなんですが、ATNDは何日に書くことになるのかわかりにくく、順番も決めづらいなどAdvent Calendarの募集には向いてないと個人的には思ってたので、Advent Calendarの登録サイトを作ってみました。</p>

<p><a href="http://www.adventar.org/">Adventar</a></p>

<p>任意の日付にボタン一つで登録できるのでATNDよりは簡単でいいかなと思います。</p>

<p>思いついて特急で作ったんでバグってるところとかつかいにくいとことがあると思いますけどちょいちょい直していく予定です。</p>

<ul>
  <li>エントリー公開後にタイトルとURLを入力できるようにする</li>
  <li>GoogleカレンダーとかiCalでカレンダーの予定を読めるようにする</li>
  <li>デザインとか使い勝手調整</li>
</ul>

<p>などはやろうと思ってます。</p>

<p>ちなみにフレームワークにはRailsを使っていてサーバーには<a href="http://sqale.jp/">Sqale</a>を使ってます。Sqaleはちょうど試してみようと思ってたところにこの前のYAPCで3ヶ月無料クーポンもらったんでラッキーでした。サーバーの設定初めてから1時間くらいでデプロイできたんで超簡単でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「ノンプログラマのためのJavaScriptはじめの一歩」の1章が公開されました]]></title>
    <link href="http://webtech-walker.com/archive/2012/10/jsippo_release_intro.html"/>
    <updated>2012-10-31T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/10/jsippo_release_intro</id>
    <content type="html"><![CDATA[<p>11/7発売予定の書籍「<a href="http://www.amazon.co.jp/dp/4774153761">ノンプログラマのためのJavaScriptはじめの一歩</a>」のはじめにと1章が先行して技評のWebサイトで公開されました。</p>

<ul>
  <li><a href="http://gihyo.jp/magazine/wdpress/plus/978-4-7741-5376-6/0001">はじめに</a></li>
  <li><a href="http://gihyo.jp/magazine/wdpress/plus/978-4-7741-5376-6/0002">1章</a></li>
</ul>

<p>1章はイントロ的なところで、JavaScriptを学ぶ前にJavaScriptの動かし方やデバッグツールの使い方について解説しています。</p>

<p>また、本書籍の2章以降で解説するスライドショーのサンプルプログラムも1章で登場するため公開されています。次のようにボタンを押すと次の画像に行くというだけの、簡単なサンプルプログラムです。</p>

<figure>
<iframe src="/sample/2012-10-31-jsippo_release_intro/index.html" width="650" height="550" frameborder="none" style="border: 1px solid #000; background: #FFF; margin: 0 auto;"></iframe>
</figure>

<p><a href="http://image.gihyo.co.jp/assets/files/book/2012/978-4-7741-5376-6/chapter1/1-5-1_slideshow-1/index.html">技評のWebサイト</a>からも実際に試すことができます。</p>

<p>JavaScriptのソースはこんなかんじです。全体で90行程度、コメントや空行を除くと40行程度です。</p>

<div class="highlight"><pre><code class="javascript"><span class="cm">/**</span>
<span class="cm"> * 簡易スライドショー</span>
<span class="cm"> *</span>
<span class="cm"> * nextボタンを押したときに画像を切り替える簡単な</span>
<span class="cm"> * スライドショーのサンプルプログラムです。</span>
<span class="cm"> */</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

    <span class="cm">/*============================</span>
<span class="cm">     * 変数の定義</span>
<span class="cm">     *===========================*/</span>

    <span class="c1">// 写真のリストの定義</span>
    <span class="kd">var</span> <span class="nx">photoList</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span> <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;img/spring.jpg&#39;</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;春の桜&#39;</span> <span class="p">},</span>
        <span class="p">{</span> <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;img/summer.jpg&#39;</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;夏のひまわり&#39;</span> <span class="p">},</span>
        <span class="p">{</span> <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;img/autumn.jpg&#39;</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;秋の紅葉&#39;</span> <span class="p">},</span>
        <span class="p">{</span> <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;img/winter.jpg&#39;</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;冬の山&#39;</span> <span class="p">}</span>
    <span class="p">];</span>
    <span class="kd">var</span> <span class="nx">photoLength</span> <span class="o">=</span> <span class="nx">photoList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>

    <span class="c1">// 要素の取得</span>
    <span class="kd">var</span> <span class="nx">photo</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;photo&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">nextBtn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;nextBtn&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">);</span>

    <span class="c1">// 現在のインデックスを保存するための変数</span>
    <span class="kd">var</span> <span class="nx">currentIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="cm">/*============================</span>
<span class="cm">     * 関数の定義</span>
<span class="cm">     *===========================*/</span>

    <span class="c1">// 指定の写真に表示を切り替える関数</span>
    <span class="kd">function</span> <span class="nx">showPhoto</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 全ての画像を非表示</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">photoLength</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">photoList</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">elem</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;none&#39;</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// 表示する対象の要素を取得</span>
        <span class="kd">var</span> <span class="nx">targetPhoto</span> <span class="o">=</span> <span class="nx">photoList</span><span class="p">[</span><span class="nx">index</span><span class="p">];</span>

        <span class="c1">// タイトルを表示</span>
        <span class="kd">var</span> <span class="nx">viewNumber</span> <span class="o">=</span> <span class="nx">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">title</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;[&#39;</span> <span class="o">+</span> <span class="nx">viewNumber</span> <span class="o">+</span> <span class="s1">&#39;] &#39;</span> <span class="o">+</span> <span class="nx">targetPhoto</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>

        <span class="c1">// 画像を表示</span>
        <span class="nx">targetPhoto</span><span class="p">.</span><span class="nx">elem</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;inline&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/*============================</span>
<span class="cm">     * イベントの設定</span>
<span class="cm">     *===========================*/</span>

    <span class="c1">// nextボタンのイベントを設定</span>
    <span class="nx">nextBtn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 表示するインデックスを計算</span>
        <span class="nx">currentIndex</span><span class="o">++</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">currentIndex</span> <span class="o">===</span> <span class="nx">photoLength</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">currentIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// 画像を切り替える</span>
        <span class="nx">showPhoto</span><span class="p">(</span><span class="nx">currentIndex</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="cm">/*============================</span>
<span class="cm">     * 初期化処理</span>
<span class="cm">     *===========================*/</span>

    <span class="c1">// img要素をHTMLに追加</span>
    <span class="kd">var</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">img</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">photoLength</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">item</span> <span class="o">=</span> <span class="nx">photoList</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>

        <span class="c1">// img要素を作成</span>
        <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">);</span>

        <span class="c1">// 作成したimg要素に属性を設定</span>
        <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">src</span><span class="p">;</span>
        <span class="nx">img</span><span class="p">.</span><span class="nx">alt</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>

        <span class="c1">// 作成したimg要素をHTMLに追加</span>
        <span class="nx">photo</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">img</span><span class="p">);</span>

        <span class="c1">// 作成したimg要素を保存</span>
        <span class="nx">item</span><span class="p">.</span><span class="nx">elem</span> <span class="o">=</span> <span class="nx">img</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 初期表示のためにshowPhotoを一度だけ実行する</span>
    <span class="nx">showPhoto</span><span class="p">(</span><span class="nx">currentIndex</span><span class="p">);</span>
<span class="p">};</span>
</code></pre>
</div>

<p>見る人が見れば突っ込みどころもあるとは思いますが、ひとつのサンプルにループや分岐や関数、イベントやDOM操作など、できるだけ詰め込んで何度もリライトした結果こうなっています。</p>

<p>本書籍ではこのサンプルプログラムを完全に理解することを一つの目標にしています。</p>

<p>2章と3章ではJavaScriptの文法やDOMの基本を解説するのですが、文法や機能を解説するごとに、このプログラムのどこでそれが使われているかを確認し、実際にどのように使われるかを解説したり、どこまでサンプルプログラムを理解できたかを細かく振り返ります。</p>

<p>そして4章ではこのプログラムの流れを解説しながら「読む」ということと、どのようにして一からこのプログラムを「書く」かという二つの視点からプログラムの全体像について解説します。</p>

<p>最後に5章でjQueryについて解説してこのスライドショーをjQueryでも書いてみて、アニメーションなどの機能を付け加えた、より実践的なプログラムにするというのが全体の構成です。</p>

<p>もし1章とサンプルプログラムを見て興味を持った方は購入をご検討ください！</p>

<figure>
  <a href="http://amazon.jp/dp/4774153761">
  <img src="/img/posts/2012-10-23-jsippo/cover.png" alt="ノンプログラマのための JavaScriptはじめの一歩" width="400" height="568" />
  <figcaption>Amazon.co.jp： ノンプログラマのための JavaScriptはじめの一歩</figcaption>
  </a>
</figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lessのextendがexperimentalなブランチにマージされたようです]]></title>
    <link href="http://webtech-walker.com/archive/2012/10/less_extend_experimental.html"/>
    <updated>2012-10-29T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/10/less_extend_experimental</id>
    <content type="html"><![CDATA[<p>一年くらい前に僕がpull requestしたSassのextendみたいな機能をlessにも実装するってやつが実験的なブランチにマージされたっぽい。</p>

<p><a href="https://github.com/cloudhead/less.js/pull/509">Add Sass like extend by hokaccha · Pull Request #509 · cloudhead/less.js</a><br />
<a href="https://github.com/cloudhead/less.js/tree/1_4_0">cloudhead/less.js at 1_4_0</a></p>

<p>シンタックスが<code>+</code>は隣接セレクタと間違えそうだからってことで<code>++</code>になってる。</p>

<p>こんな感じのlessファイルをコンパイルすると</p>

<div class="highlight"><pre><code class="css"><span class="nc">.foo</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.bar</span> <span class="p">{</span>
  <span class="o">++.</span><span class="n">foo</span><span class="p">;</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">13px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>結果はこうなる。</p>

<div class="highlight"><pre><code class="css"><span class="nc">.foo</span><span class="o">,</span>
<span class="nc">.bar</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.bar</span> <span class="p">{</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">13px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>npmはgithubからモジュールをインストールできて<code>#</code>以降にブランチ名を指定すれば特定のブランチのものを取ってくるので次のようにすれば試すことができる。</p>

<pre><code>$ cd path/to/working_dir
$ npm install git://github.com/cloudhead/less.js.git#1_4_0
$ ./node_modules/.bin/lessc test.less
.foo,
.bar {
  color: red;
}
.bar {
  font-size: 13px;
}
</code></pre>

<p>lessの作者のcloudheadさんがやる気なくしたのかなんなのか、まったくコミットしなくなってlessはもう終わりだみたいな感じに一時期なっていて、extendのやつも全く取り込まれる気配がなかったんだけど、最近では別の人が開発を引き継いで開発が進んでるようで、extendもそういう流れで取り込まれたみたい。</p>

<p>masterにいつマージされるか（そもそもマージされるかどうか）はまだ未定だけど早く使えるようになるといいな。</p>

<p>ちなみにそんな僕は最近Sass派。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mochaとphantomJSとtravis-ciでフロントエンドJavaScriptのテスト]]></title>
    <link href="http://webtech-walker.com/archive/2012/10/mocha_phantomjs_travisci.html"/>
    <updated>2012-10-23T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/10/mocha_phantomjs_travisci</id>
    <content type="html"><![CDATA[<p><a href="http://atnd.org/events/33022">東京Node学園祭2012 アドベントカレンダー</a>の9日目です。Node.jsとほとんど関係ないうえに内容がけっこう薄い感じなった気がするんですけど気にせずいこうと思います。</p>

<p>フロントエンドのJavaScriptをテストするとき最近はいつもmochaを使ってるんですが、やはりJenkinsとかtravis-ciを使って自動テストもしたいと思って試してみました。</p>

<p><a href="https://github.com/hokaccha/mocha-phantom-travis-test">hokaccha/mocha-phantom-travis-test</a></p>

<p>ここではよくあるjQueryで画像のロールオーバーをするというプラグインを作ってそのライブラリに対してテストを書いています。ソースコードはこんな感じです。</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">rollover</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">$img</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">src</span> <span class="o">=</span> <span class="nx">$img</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">src_on</span> <span class="o">=</span> <span class="nx">src</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/_off\.(\w+)$/</span><span class="p">,</span> <span class="s1">&#39;_on.$1&#39;</span><span class="p">);</span>

    <span class="nx">$img</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mouseenter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">$img</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="nx">src_on</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">$img</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mouseleave&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">$img</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="nx">src</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre>
</div>

<p>画像名に<code>_off</code>という文字列がある場合にマウスオーバーで<code>_on</code>に切り替えるといういたって普通のロールオーバーのプラグインです。こんな感じで動きます。</p>

<p><a href="http://hokaccha.github.com/mocha-phantom-travis-test/example/">rollover sample</a></p>

<p>このプラグインに対してmochaでテストを書くとこのようになります。</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;jquery.rollover&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">$img</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">off</span> <span class="o">=</span> <span class="s1">&#39;../example/menu01_off.png&#39;</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">on</span> <span class="o">=</span> <span class="s1">&#39;../example/menu01_on.png&#39;</span><span class="p">;</span>

  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$img</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;img&gt;&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="nx">off</span><span class="p">).</span><span class="nx">rollover</span><span class="p">();</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">$img</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="nx">off</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;mouseenterで_offが_onになること&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$img</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;mouseenter&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">$img</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="nx">on</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;mouseleaveで_onが_offになること&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$img</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;mouseenter&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">$img</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="nx">on</span><span class="p">);</span>

    <span class="nx">$img</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;mouseleave&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">$img</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="nx">off</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>

<p>ブラウザでテストを実行するとこんな感じになります。</p>

<p><a href="http://hokaccha.github.com/mocha-phantom-travis-test/test/">Test | jquery.rollover</a></p>

<p>このテストをphantomJSで実行できるようにします。mochaのテストをphantomJSで実行できるようにするのに<a href="https://github.com/metaskills/mocha-phantomjs">mocha-phantomjs</a>というのものがあります。mochaはreporterにspecやtapを指定してブラウザで実行した場合<code>console.log</code>で出力するのでphantomJSの<code>onConsoleMessage</code>とか使えば簡単に書けそうだったので自分で書いてみようと思ったんですけど予想以上に面倒なことが多かったのでおとなしくこのライブラリをつかうことにしました。</p>

<p>mocha-phantomjsをnpmでインストールするようにしてもいいんですが、フロントエンドのコードしかないプロジェクトにnodeとかnpmの依存が入るのはどうかと思ったので必要なファイルだけもってきて設置しました。必要なのは以下の2ファイルです。</p>

<ul>
  <li><a href="https://github.com/metaskills/mocha-phantomjs/blob/master/lib/mocha-phantomjs.coffee">lib/mocha-phantomjs.coffee</a></li>
  <li><a href="https://github.com/metaskills/mocha-phantomjs/blob/master/lib/mocha-phantomjs/core_extensions.js">lib/mocha-phantomjs/core_extensions.js</a></li>
</ul>

<p>どこに置いてもいいんですが、今回の例ではtest/libディレクトリに設置しています。</p>

<p><a href="https://github.com/hokaccha/mocha-phantom-travis-test/tree/master/test/lib">mocha-phantom-travis-test/test/lib</a></p>

<p>そして<code>mocha.run()</code>を実行するところを次のように書きます。</p>

<div class="highlight"><pre><code class="javascript"><span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">mochaPhantomJS</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">mochaPhantomJS</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">mocha</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre>
</div>

<p>phantomJSから呼ぶ場合は<code>mochaPhantomJS.run()</code>で実行、そうでない場合は通常の<code>mocha.run()</code>でテストを実行するようにしています。</p>

<p>これで以下のようにするとmochaのテストをコマンドラインから実行できます。</p>

<pre><code>$ phantomjs test/lib/mocha-phantomjs.coffee test/index.html

  jquery.rollover
    ✓ mouseenterで_offが_onになること 
    ✓ mouseleaveで_onが_offになること 


  ✔ 2 tests complete (21 ms)
</code></pre>

<p>ファイル名の後にreporterを指定することもできるので結果を<code>tap</code>で出力することもできます。デフォルトは<code>spec</code>です。</p>

<p>最後にtravis-ciの設定ですが、travis-ciはphantomJSをサポートしているので、.travis.ymlにその設定を以下のように書くだけです。</p>

<pre><code>script: phantomjs test/lib/mocha-phantomjs.coffee test/index.html
</code></pre>

<p>これでtravis-ciのほうでこのリポジトリを追加してpushしたら自動でテストが走るようになります。簡単すぎワロタ。</p>

<p>以下が結果です。</p>

<p><a href="https://travis-ci.org/#!/hokaccha/mocha-phantom-travis-test/builds/2862206">hokaccha/mocha-phantom-travis-test #1 | Travis CI</a></p>

<p>以下はわざとコケるようにしてみたテストの結果です。</p>

<p><a href="https://travis-ci.org/#!/hokaccha/mocha-phantom-travis-test/builds/2862214">hokaccha/mocha-phantom-travis-test #2 | Travis CI</a></p>

<p>このようにtravis-ciを使うと簡単に自動テストできますが、phantomJSでテストできるところまでいけばあとはJenkinsでも同じようにできるはずです。</p>

<p>便利な世の中になったものだと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「ノンプログラマのための JavaScriptはじめの一歩」という本を書きました]]></title>
    <link href="http://webtech-walker.com/archive/2012/10/jsippo.html"/>
    <updated>2012-10-23T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/10/jsippo</id>
    <content type="html"><![CDATA[<figure>
  <a href="http://amazon.jp/dp/4774153761">
  <img src="/img/posts/2012-10-23-jsippo/cover.png" alt="ノンプログラマのための JavaScriptはじめの一歩" width="400" height="568" />
  <figcaption>Amazon.co.jp： ノンプログラマのための JavaScriptはじめの一歩</figcaption>
  </a>
</figure>

<p>2012/11/7に発売予定です。ハッシュタグは<a href="https://twitter.com/search/realtime?q=%23jsippo">#jsippo</a>なのでみなさんどうぞふるってツイートしてください。</p>

<h2 id="section">想定している対象</h2>

<p>タイトルからもわかるように、デザイナやマークアップエンジニアなどをやっていてプログラムはほとんどわからないというくらいの読者を想定しています。</p>

<p>なので普段JavaScriptを書いている人や、他の言語をやっていて、JavaScriptを学んでみようと思っているような方にはもの足りない内容だと思います。そういう人は<a href="http://www.amazon.co.jp/gp/product/4873115736?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873115736&amp;linkCode=shr&amp;tag=webtech00-22">サイ本</a>とか<a href="http://www.amazon.co.jp/gp/product/477414813X?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=477414813X&amp;linkCode=shr&amp;tag=webtech00-22&amp;=books&amp;qid=1350202385&amp;sr=1-1">パーフェクトJavaScript</a>を読みましょう。</p>

<p>何を書いて何を書かないかというところの線引に苦労しました。たとえば変数のスコープやprototypeなどはJavaScriptを学ぶ上では避けて通れませんが、そこは敢えて説明を省いています。初めてプログラムを学ぶときにスコープがどうとか言われてもわからないので、そこを学ぶのは二歩目、三歩目からで十分だと思ったからです。でもこれを説明しないとアレが説明できないし・・みたいな葛藤もけっこうありました。</p>

<h2 id="section-1">特徴</h2>

<p>この書籍でおそらく一番特徴的なのは一つのサンプルプログラムを、一冊を通して解説するということです。そのプログラムは簡単なものでボタンを押すと予め用意しといた数枚の画像が切り替わる、簡易的なスライドショーのプログラムです。</p>

<p>なぜこのような構成にしたかというと、ある機能を解説したとき、実際のプログラムでどのようにそれが使われるかがわかると、より深く理解ができると思ったからです。</p>

<p>例えば「配列」というものを学んだ時に、配列がどういうものかなんとなくわかっても、それを使うと何がいいのか、実際のプログラムではどのように利用すればいいのかというところまで理解してほしいと思いました。なので、「配列」というものの解説をした後、実際にスライドショーのどこでどのように使われているかを解説しています。</p>

<p>初学者向けなので、配列をつくるときに「どう書くか」はもちろん解説しますが、「どう使うか」というのをできるだけ感じてもらう配慮をしたつもりです。</p>

<p>これまでこのような構成の本は見たことがないので（知らないだけかもしれないけど）、もしかしたら逆にわかりにくくなっているのではないかという不安もありますが、他にあまりない構成にできたし、うまくまとめられたと思うのでよかったと思っています。</p>

<p>スライドショーのプログラムはjQueryを使わず書いていますが、実務で使うときにjQueryは避けて通れないので最後にjQueryについて解説し、スライドショーのプログラムをjQueryで書きなおしてブラッシュアップするという構成になっています。</p>

<h2 id="section-2">イベント告知</h2>

<p>出版記念イベントとしてジュンク堂さんで<a href="http://twitter.com/takazudo">@takazudo</a>さんと「ノンプログラマがJavaScriptを 学んでいくにはどうすればいいのか」というテーマでトークセッションします。興味があるかたはぜひご参加ください。</p>

<p><a href="http://www.junkudo.co.jp/tenpo/evtalk.html#20121122_talk">http://www.junkudo.co.jp/tenpo/evtalk.html#20121122_talk</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitで差分ファイルを抽出する]]></title>
    <link href="http://webtech-walker.com/archive/2012/09/git_export_diff.html"/>
    <updated>2012-09-24T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/09/git_export_diff</id>
    <content type="html"><![CDATA[<p>変更したファイルだけまとめて取り出したいというケースがけっこうあるみたいなんで書いてみた。</p>

<p><a href="https://gist.github.com/3764870">gitの差分のファイルをつくる — Gist</a></p>

<p>こいつをパスが通ってるところに置いて実行権限つけたら</p>

<pre><code>$ git export-diff &lt;commit&gt; &lt;output_dir&gt;
</code></pre>

<p>こんな感じで実行すると<code>&lt;commit&gt;</code>からHEADまでの差分ファイルを<code>&lt;output_dir&gt;</code>にコピーする。<code>&lt;commit&gt;</code>の部分は<code>git diff</code>と同じ物が使えるので</p>

<pre><code>$ git export-diff HEAD^^^ path/to/dir
$ git export-diff HEAD^^^..HEAD^ path/to/dir
$ git export-diff &lt;sha1&gt; &lt;sha1&gt; path/to/dir
$ git export-diff &lt;sha1&gt;..&lt;sha1&gt; path/to/dir
</code></pre>

<p>みたいな感じでもOK。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryでアニメーション終了時のcallback]]></title>
    <link href="http://webtech-walker.com/archive/2012/09/jquery_animate_callback.html"/>
    <updated>2012-09-23T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/09/jquery_animate_callback</id>
    <content type="html"><![CDATA[<p>jQueryでfadeOutとかのアニメーションして終わったらなんかするといったときにcallback関数を引数に指定するのとDeferred使う方法があるんだけどこの二つは挙動が違う。</p>

<p>こういうHTMLがあったとして</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;div&gt;</span>foo<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div&gt;</span>bar<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div&gt;</span>baz<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

<p>まず以下のようなcallback関数の場合はそれぞれのfadeOutが終わるごとに呼ばれる。</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;fin&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
</div>

<p>つまり<code>'fin'</code>が3回出力される。</p>

<p>一方Deferredを使った場合はこんな感じ。</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">.</span><span class="nx">promise</span><span class="p">().</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;fin&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
</div>

<p><code>.promise()</code>がDeferredオブジェクトを返すので<code>.done</code>に設定した関数がアニメーション終了時に呼ばれる。こっちは全てのアニメーションが終わった時点で呼ばれるので<code>'fin'</code>は一回しか呼ばれない。という違いがあるみたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuでResqueを使うときに優雅に再起動する]]></title>
    <link href="http://webtech-walker.com/archive/2012/09/resque_heroku.html"/>
    <updated>2012-09-21T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/09/resque_heroku</id>
    <content type="html"><![CDATA[<p>Ruby製のジョブキューサーバーである<a href="https://github.com/defunkt/resque">Resque</a>はHerokuのWorkerプロセスで動かそうとすると一つ問題があった。</p>

<p>シグナルハンドリングの問題なんだけど、Herokuはworkerプロセスを再起動するときに<code>SIGTERM</code>を送り、プロセスが終了したら再度プロセスを起動する。<code>SIGTERM</code>を送ってworkerが10秒間プロセスが終了しなかったら<code>SIGKILL</code>で強制終了させる。のでworker側は<code>SIGTERM</code>を受け取ったら10秒以内に安全に（今あるジョブを終了するなりなんなりして）プロセスを終了する必要がある。</p>

<p>そのようなHerokuの挙動は以下に書いてある。</p>

<p><a href="https://devcenter.heroku.com/articles/ps#graceful-shutdown-with-sigterm">Managing Heroku Processes | Heroku Dev Center</a></p>

<p>一方で、Resqueのシグナルハンドリングがどうなっているかというと、<code>SIGTERM</code>で強制終了するようになってる。</p>

<p><a href="https://github.com/defunkt/resque/blob/1-x-stable/README.markdown#signals">resque/README.markdown at 1-x-stable · defunkt/resque</a></p>

<p>なのでHerokuでResqueを使った場合、再起動するときに安全にプロセスが再起動できないという問題があったというわけ。</p>

<p>なのでこんな感じのforkしてシグナルハンドリングの部分だけパッチ当てたやつとかもあった。</p>

<p><a href="https://github.com/mjezzi/resque-cedar">mjezzi/resque-cedar · GitHub</a></p>

<p>で、それがResqueの1.22.0で解決されたみたい。</p>

<p>1.22.0では<code>TERM_CHILD=1</code>というのを環境変数で設定すればマスタプロセスが<code>SIGTERM</code>を受け取ったときに、起動している子プロセスに対して<code>SIGTERM</code>を送り、子プロセスが<code>RESQUE_TERM_TIMEOUT</code>で設定された秒数の間に終了しなかったら子プロセスに<code>SIGKILL</code>を送って強制終了させるという機能が実装された。これによって</p>

<pre><code>$ TERM_CHILD=1 RESQUE_TERM_TIMEOUT=10 QUEUES=* rake resque:work
</code></pre>

<p>のように起動し、worker側で<code>SIGTERM</code>をハンドリングすることで安全に再起動できるようになる。</p>

<h2 id="section">試してみる</h2>

<div class="highlight"><pre><code class="ruby"><span class="c1"># worker.rb</span>

<span class="nb">require</span> <span class="s1">&#39;resque/errors&#39;</span>

<span class="k">class</span> <span class="nc">SampleWork</span>
  <span class="vi">@queue</span> <span class="o">=</span> <span class="ss">:test</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span>
    <span class="nb">sleep</span> <span class="mi">10</span>
    <span class="nb">puts</span> <span class="s1">&#39;complete job!&#39;</span>
  <span class="k">rescue</span> <span class="no">Resque</span><span class="o">::</span><span class="no">TermException</span>
    <span class="nb">sleep</span> <span class="mi">2</span>
    <span class="nb">puts</span> <span class="s1">&#39;graceful shutdown!&#39;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<div class="highlight"><pre><code class="ruby"><span class="c1"># clinet.rb</span>

<span class="nb">require</span> <span class="s1">&#39;resque&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;./worker&#39;</span>

<span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span> <span class="no">SampleWork</span>
</code></pre>
</div>

<div class="highlight"><pre><code class="ruby"><span class="c1"># Rakefile</span>

<span class="nb">require</span> <span class="s1">&#39;resque/tasks&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;./worker&#39;</span>
</code></pre>
</div>

<p>こんな感じのworkerをつくって試してみる。<code>Resque::TermException</code>という例外でResqueからの<code>SIGTERM</code>をキャッチできるようなのでこのworkerは<code>SIGTERM</code>を受け取ったら2秒待って文字列を出力した後終了することが期待される。</p>

<p>まずは普通にworkerを起動してみる。</p>

<pre><code>$ QUEUES=* rake resque:work                       
</code></pre>

<p>この状態でclinet.rbでジョブを登録して10秒以内にResqueのマスタプロセスに対して<code>SIGTERM</code>を送る。</p>

<pre><code>$ kill -TERM {pid}
</code></pre>

<p>そしたら起動していたワーカープロセスは何も出力されずに終了した。これは<code>SIGTERM</code>を受け取ったら強制終了というResqueのドキュメントに書いてある挙動なので正しい。</p>

<p>次に<code>TERM_CHILD</code>と<code>RESQUE_TERM_TIMEOUT</code>を指定して起動してみる。</p>

<pre><code>$ TERM_CHILD=1 RESQUE_TERM_TIMEOUT=10 QUEUES=* rake resque:work
</code></pre>

<p>同じようにclinet.rbでジョブを登録して10秒以内にResqueのマスタプロセスに対して<code>SIGTERM</code>を送る。そうすると2秒後に</p>

<pre><code>$ TERM_CHILD=1 RESQUE_TERM_TIMEOUT=10 QUEUES=* rake resque:work
graceful shutdown!
</code></pre>

<p>となってプロセスが終了して期待通り動いた。</p>

<p>次に<code>RESQUE_TERM_TIMEOUT=1</code>としてタイムアウトを1秒に指定する。</p>

<pre><code>$ TERM_CHILD=1 RESQUE_TERM_TIMEOUT=1 QUEUES=* rake resque:work
</code></pre>

<p>これで同じようにジョブを登録して<code>SIGTERM</code>を送ったら何も出力されずに終了した。sleepが2秒でタイムアウトが1秒なので<code>SIGTERM</code>のハンドリングで終了するより先にタイムアウトして終了したことがわかる。</p>

<p>Resque 2.xではこれがデフォルトになるとかなんとか（要確認）。</p>

<h3 id="section-1">参考</h3>

<ul>
  <li><a href="https://devcenter.heroku.com/articles/queuing-ruby-resque">Queuing in Ruby with Redis and Resque | Heroku Dev Center</a></li>
  <li><a href="http://hone.heroku.com/resque/2012/08/21/resque-signals.html">hone.heroku.com | Resque Signals</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俺の最強ブログシステムも火を噴いてたぜ]]></title>
    <link href="http://webtech-walker.com/archive/2012/09/fired-myblog.html"/>
    <updated>2012-09-20T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/09/fired-myblog</id>
    <content type="html"><![CDATA[<p><a href="http://tech.nitoyon.com/ja/blog/2012/09/20/moved-completed/">俺の最強ブログ システムが火を噴くぜ - てっく煮ブログ</a></p>

<p>これとJekyll、DISQUS、Githubを使ってるところあたりはほとんど同じだった。</p>

<p>元記事がレンタルサーバーにデプロイしてるのに対してこっちはgithub pagesにデプロイしてる。サーバーも用意しなくていいからお手軽かつ最強だぜ〜。</p>

<p>ただgithub pagesに直接Jekyllのソース上げるとplugin使えなかったりして不便なんでJekyllで生成した静的ファイルをgh-pagesブランチにコミットしていて</p>

<ul>
  <li><a href="https://github.com/hokaccha/webtech-walker">masterブランチ</a> -&gt; ソース</li>
  <li><a href="https://github.com/hokaccha/webtech-walker/tree/gh-pages">gh-pagesブランチ</a> -&gt; 生成したファイル</li>
</ul>

<p>ってしてるんだけど、いちいちブランチ切り替えてなんちゃらしたりhookスクリプトでほげほげするのは面倒なんで</p>

<pre><code>$ rake deploy
</code></pre>

<p>ってやるとJekyllのビルドが走って生成したファイルコピーしてgh-pagesにコミットしてGithubにpushするところまで自動でできるようにしてる。ビルドタスクはこんな感じ。</p>

<p><a href="https://github.com/hokaccha/webtech-walker/blob/f2b178baa3bb00776f089f50b7b3e2954c83694c/Rakefile#L10-20">webtech-walker/Rakefile at f2b178baa3bb00776f089f50b7b3e2954c83694c · hokaccha/webtech-walker</a></p>

<div class="highlight"><pre><code class="ruby"><span class="n">desc</span> <span class="s1">&#39;deploy to production&#39;</span>
<span class="n">task</span> <span class="ss">:deploy</span> <span class="k">do</span>
  <span class="n">sh</span> <span class="s1">&#39;bundle exec jekyll&#39;</span>
  <span class="n">sh</span> <span class="s1">&#39;rm -rf _deploy/*&#39;</span>
  <span class="n">sh</span> <span class="s1">&#39;cp -R _site/* _deploy&#39;</span>
  <span class="n">cd</span> <span class="s1">&#39;_deploy&#39;</span> <span class="k">do</span>
    <span class="n">sh</span> <span class="s1">&#39;git add -A&#39;</span>
    <span class="n">sh</span> <span class="s1">&#39;git commit -v&#39;</span>
    <span class="n">sh</span> <span class="s1">&#39;git push origin gh-pages&#39;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>あとキャッシュ系のプラグインは使ってなくて、新しい記事書くときは</p>

<pre><code>$ jekyll --auto --server --limit_posts 3
</code></pre>

<p>とかすれば対象の記事を絞れるので遅くならないし、デプロイのときは全記事出力するからちょっと遅いけど今160記事くらいで5秒程度だからまあ別に大丈夫かなと思ってる。でもコードハイライト多用してる場合はこういう問題もあるから注意。</p>

<p><a href="http://d.hatena.ne.jp/hokaccha/20120808/1344436656">pygmentsが原因でjekyllが重くなってた - hokaccha.hamalog v2</a></p>

<p>というわけでJekyllおすすめ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryのイベントハンドラでreturn falseするとイベントのバブリングが止まる]]></title>
    <link href="http://webtech-walker.com/archive/2012/09/event_handler_return_false.html"/>
    <updated>2012-09-20T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/09/event_handler_return_false</id>
    <content type="html"><![CDATA[<p>例えばjQueryでスムーズスクロール的なのを実装したとして、a要素のデフォルトの機能を止めるために以下のように<code>return false</code>ってするとイベントのバブリングまでとまるよという話。</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a[href*=#]&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// スムーズスクロースの処理</span>
    <span class="p">...</span>

    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>

<p>つまり</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a[href*=#]&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">ev</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ev</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
    <span class="nx">ev</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>

    <span class="c1">// スムーズスクロースの処理</span>
    <span class="p">...</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>

<p>としたときと同じ挙動になる。<code>return false</code>してるコードは、デフォルトの挙動を止めるのは意図してるけど、イベントのバブリングまで止めるのは意図してない場合が多いんじゃなかろうかと思う。意図してるなら特に問題ない。</p>

<p>それでイベントのバブリングがとまると何が一番困るかというdelegateが使えなくなること。</p>

<p>具体的にはこれが動かない。</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a[href*=#]&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// スムーズスクロースの処理</span>
    <span class="p">...</span>

    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">});</span>

  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">delegate</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;clicked!!&#39;</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>

<p>delegateはイベントのバブリングを利用してイベントを捕まえるので最初のスムーズスクロールで<code>return false</code>しちゃうとそこでイベントのバブリングが止まるのでdelegateのイベントが実行されない。なのでイベントのデフォルトの動作を止めたいだけなら、できるだけ</p>

<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a[href*=#]&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">ev</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ev</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>

    <span class="c1">// スムーズスクロースの処理</span>
    <span class="p">...</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>

<p>のように<code>preventDefault()</code>を使うようにしたほうがいいよねというお話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptのゲッタ]]></title>
    <link href="http://webtech-walker.com/archive/2012/09/jsgetter.html"/>
    <updated>2012-09-07T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/09/jsgetter</id>
    <content type="html"><![CDATA[<p>JavaScriptでゲッタを定義するのに__defineGetter__っていうのが使えて</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">__defineGetter__</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hoge!!&#39;</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">hoge</span><span class="p">;</span> <span class="c1">//=&gt; hoge!!</span>
</code></pre>
</div>

<p>こんな感じで()つけなくても関数が呼び出されるのでプロパティにアクセスのようにして関数を呼び出すことができる。</p>

<p>Node.jsのライブラリのコード読んでるとよく__defineGetter__がでてくる（Node.jsのコードというかTJのコードに多いだけな気もする）。</p>

<p><a href="https://github.com/visionmedia/express/blob/75fc8820016739a38b395955902ce118467c8f42/lib/request.js#L180">express/lib/request.js at master · visionmedia/express · GitHub</a></p>

<p>でも__defineGetter__はECMAScript非標準なんで非推奨ってMDNに書いてある。</p>

<p><a href="https://developer.mozilla.org/ja/docs/JavaScript/Reference/Global_Objects/Object/defineGetter">defineGetter | MDN</a></p>

<p>Object.definePropertyを使えって書いてある。Object.definePropertyを使うとこんな感じ。</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="p">{</span>  
  <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hoge!!&#39;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">hoge</span><span class="p">;</span> <span class="c1">//=&gt; hoge!!</span>
</code></pre>
</div>

<p>もしくはこれでもいける。</p>

<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">get</span> <span class="nx">hoge</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hoge!!&#39;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">hoge</span><span class="p">;</span> <span class="c1">//=&gt; hoge!!</span>
</code></pre>
</div>

<p>どれが一番いいかはよくわからん。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github pages + jekyllにした]]></title>
    <link href="http://webtech-walker.com/archive/2012/08/renewal.html"/>
    <updated>2012-08-08T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2012/08/renewal</id>
    <content type="html"><![CDATA[<p>5年くらい前のWordPressで動いてたブログをjekyllにしてgithub pagesで動くように移行しました。ついでにデザインもリニューアル。</p>

<p>エントリーのURLは変わってないんだけど、フィードのURLだけ変わりました。というか、feedburner.jpのドメインでフィード配信してたんですけど、feedburner.jpがちょっと前に使えなくなったみたいで、変えないといけなくなりました。新しいのはこれ。</p>

<p><a href="http://webtech-walker.com/atom.xml">Feed</a></p>

<p>github pagesとjekyllにしてgitでデプロイできるのとMarkdownで記事書けるようにったのはすごくいいんだけど、問題は記事数が多くて（160記事くらい）jekyllの実行に20秒くらいかかること。なんか一周してMTの再構築問題に戻ってきた気分。</p>

<p><ins>
追記：jekyllの実行に時間がかかるの解決した。こっちに書いた。
</ins></p>

<p><a href="http://d.hatena.ne.jp/hokaccha/20120808/1344436656">pygmentsが原因でjekyllが重くなってた - hokaccha.hamalog v2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox5でCSSの@keyframesにクオートがあると動かない件について]]></title>
    <link href="http://webtech-walker.com/archive/2011/06/24154503.html"/>
    <updated>2011-06-24T00:00:00+09:00</updated>
    <id>http://webtech-walker.com/archive/2011/06/24154503</id>
    <content type="html"><![CDATA[<p>Firefox5でCSSのAnimationsが実装されましたが、ちょっとWebkit系と違うところがあるみたいです。</p>

<p>どう違うかというと、@keyframesのアニメーション名にクオートを付けるとWebkit系は動くけどFirefox5は動かないみたい。</p>

<p><a href="/sample/2011-06-24-24154503/index.html">DEMO</a></p>

<p>つまりこういうこと。（説明簡略化のためベンダプレフィックスは除いてます）</p>

<div class="highlight"><pre><code class="css"><span class="c">/* Webkitは動くけどFirefoxは動かない */</span>
<span class="k">@keyframas</span> <span class="s1">&#39;hoge&#39;</span> <span class="p">{</span>
    <span class="c">/* ... */</span>
<span class="p">}</span>

<span class="c">/* WebkitでもFirefoxでも動く */</span>
<span class="k">@keyframas</span> <span class="nt">hoge</span> <span class="p">{</span>
    <span class="c">/* ... */</span>
<span class="p">}</span>
</code></pre>
</div>

<p>で、仕様はどうなってるか見てみると</p>

<p><a href="http://www.w3.org/TR/css3-animations/">CSS Animations Module Level 3</a></p>

<blockquote>
  <p>keyframes-rule: ‘@keyframes’ IDENT ‘{’ keyframes-blocks ‘}’;</p>
</blockquote>

<p>って書いてあります。で、IDENTってところにキーフレーム名がくるわけですが、このIDENTってのが何かというは別の仕様に書いてあって</p>

<p><a href="http://www.w3.org/TR/CSS21/syndata.html">Syntax and basic data types</a></p>

<p>ここで定義されてるんですけど、IDENTはどうもクオートがつかない文字っぽいんですよね。なのでFirefoxでクオートがあると動かないのは仕様通りな気がします。ちなみにAnimationsの仕様書のExampleのコードはクオートありになってるんですが、これはExampleのコードが間違えなのかな。。？</p>

<p>さらに、Safariのドキュメント見てみると</p>

<p><a href="http://developer.apple.com/library/safari/#documentation/appleapplications/reference/SafariCSSRef/Articles/OtherStandardCSS3Features.html">Safari CSS Reference: Supported CSS Rules</a></p>

<blockquote>
  <p>keyframes-rule: ‘@-webkit-keyframes’ [ IDENT | STRING ] ‘{’ keyframes-blocks ‘}’;</p>
</blockquote>

<p>って書いてあって、W3Cのほうの仕様書と違ってSTRINGが追加されてます。STRINGはクオートで囲む文字列のようなので、これに従うとWebkitのほうが正しいわけです。</p>

<p>まあまだ全然仕様が固まってない状態なのでこういうのもしょうがないんでしょうか。</p>
]]></content>
  </entry>
  
</feed>
