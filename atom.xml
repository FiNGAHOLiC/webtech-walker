<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Webtech Walker</title>
  <id>http://webtech-walker.com/</id>
  <link href="http://webtech-walker.com/"/>
  <link href="http://webtech-walker.com/atom.xml" rel="self"/>
  <updated>2013-08-19T15:00:00Z</updated>
  <author>
    <name>Kazuhito Hokamura</name>
  </author>
  <entry>
    <title>jQueryプラグインのテストを複数のjQueryのバージョンで実行する</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2013/08/mocha_travis_multi_jquery_version.html"/>
    <id>http://webtech-walker.com/archive/2013/08/mocha_travis_multi_jquery_version.html</id>
    <published>2013-08-19T15:00:00Z</published>
    <updated>2013-08-19T15:00:00Z</updated>
    <content type="html">&lt;p&gt;Travis CIは&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;span class="s"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node_js&lt;/span&gt;
&lt;span class="s"&gt;node_js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="s"&gt;0.10&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="s"&gt;0.8&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="s"&gt;0.6&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;とか書けば複数のバージョンでテスト実行してくれてマジすごいんだけど、同じことをjQueryのバージョンでもやってみた。&lt;/p&gt;

&lt;p&gt;主にjQueryのプラグインを書いてる場合などに便利だと思う。1.9で非互換な変更があったんでバージョン違うとプラグイン動かないとかけっこうあるからね。&lt;/p&gt;

&lt;p&gt;まず&lt;a href="https://github.com/metaskills/mocha-phantomjs"&gt;mocha-phantomjs&lt;/a&gt;を使ってmochaで書いたテストをphantomjsで動くようにする。&lt;/p&gt;

&lt;p&gt;jQueryのバージョンはmocha-phantomjsに環境変数で渡したいんだけど、mocha-phantomjsは環境変数をブラウザに渡せるようになってなかったので、パッチ書いたのでひとまずそっちを使う。（Pull Requestは送っといたので取り込まれたらそっち使いましょう）&lt;/p&gt;

&lt;p&gt;（追記：取り込まれた）&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ npm install mocha-phantomjs
&lt;/pre&gt;
&lt;p&gt;そしたらjQueryを環境変数からバージョンを切り替えて読めるようにする。こんな感じ。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.8.2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// ブラウザでテストを走らせる場合のバージョン
&lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mpjs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mochaPhantomJS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mpjs&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;mpjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JQUERY_VERSION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mpjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JQUERY_VERSION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://ajax.googleapis.com/ajax/libs/jquery/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/jquery.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;script src=&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;script&amp;gt;console.log(&amp;quot;Load jQuery: &amp;quot; + $.fn.jquery)&amp;lt;/script&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これでjQueryを環境変数からバージョンを指定して読み込めるようになるので、次のようなコマンドで実行するとバージョンを変更できる。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ JQUERY_VERSION=1.9.1 ./node_modules/.bin/mocha-phantomjs test/index.html
Load jQuery: 1.9.1

# test result ...
&lt;/pre&gt;
&lt;p&gt;Travis CI の設定はこんな感じ。&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;span class="s"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node_js&lt;/span&gt;
&lt;span class="s"&gt;node_js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="s"&gt;0.8&lt;/span&gt;
&lt;span class="s"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm test&lt;/span&gt;
&lt;span class="s"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="s"&gt;JQUERY_VERSION=1.6.4&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="s"&gt;JQUERY_VERSION=1.7.2&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="s"&gt;JQUERY_VERSION=1.8.3&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="s"&gt;JQUERY_VERSION=1.10.2&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="s"&gt;JQUERY_VERSION=2.0.2&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Travis CIは環境変数が上記のように複数指定されてるとすべてのパターンでテストを実行してくれるのでこれで全部のバージョンでテストされる。&lt;/p&gt;

&lt;p&gt;結果はこんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://travis-ci.org/hokaccha/mocha-phantom-travis-test/builds/10399660"&gt;hokaccha/mocha-phantom-travis-test - Travis CI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Travis CI 便利すぎる。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JavaScriptでRuby 2.0のRefinements的なのを実装してみる</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2013/05/javascript_refinements.html"/>
    <id>http://webtech-walker.com/archive/2013/05/javascript_refinements.html</id>
    <published>2013-05-08T15:00:00Z</published>
    <updated>2013-05-08T15:00:00Z</updated>
    <content type="html">&lt;p&gt;Ruby2.0でRefinementsという、クラスの拡張を特定にスコープに限定する仕組みが導入された（一応使えるけどまだ実験的な機能）。&lt;/p&gt;

&lt;p&gt;こんな感じで使う&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;# foo.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Foo&lt;/span&gt;
  &lt;span class="n"&gt;refine&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;greeting&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./foo&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hokaccha&amp;#39;&lt;/span&gt;&lt;span class="nf"&gt;.greeting&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; hello hokaccha!&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;refine&lt;/code&gt;で拡張した&lt;code&gt;String#greeting&lt;/code&gt;メソッドは&lt;code&gt;using&lt;/code&gt;したファイル内でしか使えない。&lt;/p&gt;

&lt;p&gt;このような仕組みがあると、どこでどのようにクラスが拡張されたか、わけがわからなくなるという問題を解決できる。&lt;/p&gt;

&lt;p&gt;試しにJavaScriptでも実装してみた。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/hokaccha/5546064"&gt;refinements.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで使う。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// TestRefineという名前でクラスの拡張を定義
&lt;/span&gt;&lt;span class="nx"&gt;Refinements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TestRefine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// String.prototypeを拡張する
&lt;/span&gt;  &lt;span class="nx"&gt;refine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// registerした定義をusingで使う
&lt;/span&gt;&lt;span class="nx"&gt;Refinements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TestRefine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// この中でのみ String#greeting が利用可能
&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;hokkacha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; hello hokaccha!
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;hokkacha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; エラー
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Refinements.using&lt;/code&gt;のコールバックの中でだけ&lt;code&gt;refine&lt;/code&gt;で定義したクラスの拡張が利用できる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;register&lt;/code&gt;の中ではいくつでも&lt;code&gt;refine&lt;/code&gt;できる。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;Refinements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TestRefine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Array.prototypeを拡張する
&lt;/span&gt;  &lt;span class="nx"&gt;refine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ランダムで一個だけ要素を取得するメソッド
&lt;/span&gt;    &lt;span class="nl"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// String.prototypeを拡張する
&lt;/span&gt;  &lt;span class="nx"&gt;refine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;また、&lt;code&gt;using&lt;/code&gt;は複数のモジュールを一度に利用できる。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;Refinements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TestRefine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TestRefine2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これで基本的によくないとされているネイティブオブジェクトのprototype拡張も比較的安全に行うことができるようになる。&lt;/p&gt;

&lt;p&gt;ただし（致命的な）欠点に&lt;code&gt;using&lt;/code&gt;の中で非同期処理があった場合、非同期処理の中では拡張が使えないというのがある。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;Refinements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TestRefine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ここでは使えるけど
&lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ここでは使えない
&lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;done&lt;/code&gt;みたいな関数を引数にとって終了を待ってもいいけどそしたら&lt;code&gt;using&lt;/code&gt;の外でも拡張が有効になる場合がでてきてRefinementsとはなんだったのかということになるので非同期の場合は諦めた。&lt;/p&gt;

&lt;p&gt;つまり非同期処理が多用されるJavaScriptにおいてこのモジュールは使いものにならんということですね。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>modern.IE でIEの検証環境をさくっとつくる</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2013/04/modern_ie.html"/>
    <id>http://webtech-walker.com/archive/2013/04/modern_ie.html</id>
    <published>2013-04-10T15:00:00Z</published>
    <updated>2013-04-10T15:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://www.modern.ie/ja"&gt;modern.IE&lt;/a&gt;というIEの検証のために色々できるサイトができて、ここでIEのVMのイメージを落とすことができる。Virtual Box、VMWare Fusion、Parallelsとメジャーなものは全部対応してる。すごい。&lt;/p&gt;

&lt;p&gt;とりあえずMacのVirtual BoxにIE10 Win8をいれてみた。まず以下からからMacとVirtual Boxを選んで「IE10 - Win8」の&lt;code&gt;.sfx&lt;/code&gt;とかの&lt;code&gt;.rar&lt;/code&gt;のファイルを全部ダウンロードする。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.modern.ie/ja/virtualization-tools"&gt;http://www.modern.ie/ja/virtualization-tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「.sfx」というのがよくわからんかったけどなんか圧縮形式らしくて実行権限つけて実行すれば解凍されるらしい。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ chmod +x IE10.Win8.For.MacVirtualBox.part1.sfx
$ ./IE10.Win8.For.MacVirtualBox.part1.sfx
&lt;/pre&gt;
&lt;p&gt;そうすると&lt;code&gt;.ova&lt;/code&gt;のファイルができるのでこれをダブルクリックすればVirtual BoxでWin8とIE10が使えるようになる。&lt;/p&gt;

&lt;p&gt;&lt;img alt="IE10" src="/img/posts/2013-04-11-modern_ie/ie10.png" /&gt;&lt;/p&gt;

&lt;p&gt;これはすごい。&lt;/p&gt;

&lt;p&gt;あとGithubに&lt;a href="https://github.com/xdissent/ievms"&gt;ievms&lt;/a&gt;というのがあってこれはワンライナーでVMの環境つくれるみたいな感じらしい。IEの開発環境進化してる。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Node.jsのFiberを使って非同期処理を同期っぽく書く</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2013/04/node_await_flow.html"/>
    <id>http://webtech-walker.com/archive/2013/04/node_await_flow.html</id>
    <published>2013-04-09T15:00:00Z</published>
    <updated>2013-04-09T15:00:00Z</updated>
    <content type="html">&lt;p&gt;FirefoxのJavaScriptではバージョンを1.7以上に指定するとyieldが使えて非同期処理を同期っぽく書くことができるようになる。&lt;/p&gt;

&lt;p&gt;適当な例だけどこんな感じ。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// ここで1秒待つ
&lt;/span&gt;  &lt;span class="nx"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// ここで1秒待つ
&lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// nextの引数がyieldの返り値になる
&lt;/span&gt;    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// 2秒後に出力
&lt;/span&gt;  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;]
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ちなみにこのような手法は昔から知られているので詳しくは以下を参照のこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://labs.cybozu.co.jp/blog/kazuho/archives/2007/05/coopthread.php"&gt;Kazuho@Cybozu Labs: JavaScript/1.7 で協調的マルチスレッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/amachang/20080303/1204544340"&gt;JavaScript1.7 の yield を使って、非同期処理を同期処理のように書く方法 - IT戦記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このようにyieldが使えるようになると夢広がりんぐなわけですが、未だにFirefox以外では利用できないわけです。そこでNode.jsの&lt;a href="https://github.com/laverdet/node-fibers"&gt;node-fibers&lt;/a&gt;というネイティブ拡張を使うとyieldっぽいのができるようになる。&lt;/p&gt;

&lt;p&gt;さっきのをnode-fibersを使って書くとこんな感じになる。だいたい同じ。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fibers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fiber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// ここで1秒待つ
&lt;/span&gt;  &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// ここで1秒待つ
&lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// nextの引数がyieldの返り値になる
&lt;/span&gt;    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// 2秒後に出力
&lt;/span&gt;  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;]
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;このままだとちょっと使いづらいので色々ラッパーがでてる。有名なのはこんなの。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/alexeypetrushin/synchronize"&gt;synchronize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scriby/asyncblock"&gt;asyncblock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちょっと試しに自分でも作ってみた。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hokaccha/node-await-flow"&gt;hokaccha/node-await-flow GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで使う。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AwaitFlow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;await-flow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// AwaitFlow.runのコールバックはawait関数を引数にとる
&lt;/span&gt;&lt;span class="nx"&gt;AwaitFlow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;await&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// await関数を実行するとnextが実行されるまで次の処理に移るのを待つ
&lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// next関数は第一引数にエラー、第二引数にawaitが返す値を指定する
&lt;/span&gt;      &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; foo
&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 処理が全部終わったら呼ばれる。エラーはまとめてここで処理できる
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ファイルを読み込んで1秒まって別のファイルに書き込むみたいのはこんな感じで書ける。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AwaitFlow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;await-flow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;AwaitFlow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;await&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// read file async
&lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./foo.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// wait 1000ms
&lt;/span&gt;  &lt;span class="nx"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// write file async
&lt;/span&gt;  &lt;span class="nx"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./bar.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Function#bindとか使えば1行でも書けるね！でも見づらいね！&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AwaitFlow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;await-flow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;AwaitFlow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;await&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./foo.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./bar.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;エラー処理とかがまだいまいちな感じで機能もsynchronizeとかasyncblockとかに比べて全然なのでnpmには上げてない。とりあえずコルーチン使った非同期処理を自分で書いてみたかっただけ。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ubuntu上でXvfbを使ってJavaScriptのユニットテストをChromeとFirefoxで実行する</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2013/04/xvfb-js-unit-test.html"/>
    <id>http://webtech-walker.com/archive/2013/04/xvfb-js-unit-test.html</id>
    <published>2013-04-08T15:00:00Z</published>
    <updated>2013-04-08T15:00:00Z</updated>
    <content type="html">&lt;p&gt;JavaScriptのユニットテストをJenkinsとかでCIしたいとき、PhantomJSで実行するのもいいけどやっぱりChromeとかFirefoxみたいな実際のブラウザでテストしたい。でも環境作るのめんどくさいよなーと思ってたけどXvfbを使うとChromeとかFirefoxが動くのでLinux版のChromeとFirefoxだけだとわりと簡単に環境つくれた。&lt;/p&gt;

&lt;p&gt;Xvfbというのは画面入出力をシミュレートするやつでデスクトップ環境を用意しなくてもChromeとかFirefoxとかが動かせるやつ。&lt;/p&gt;

&lt;p&gt;OSはUbuntsの12.04（precise64）で試した。&lt;/p&gt;

&lt;p&gt;まずXvfbを入れる。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ sudo apt-get install xvfb
&lt;/pre&gt;
&lt;p&gt;次にFirefoxを入れる。これもすぐ入る。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ sudo apt-get install firefox
&lt;/pre&gt;
&lt;p&gt;Chromeは一手間必要だけどわりとすぐ入る。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
$ sudo sh -c &amp;#39;echo &amp;quot;deb http://dl.google.com/linux/chrome/deb/ stable main&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list.d/google.list&amp;#39;
$ sudo apt-get update
$ sudo apt-get install google-chrome-stable
&lt;/pre&gt;
&lt;p&gt;参考: &lt;a href="http://shiganaiman.hatenablog.com/entry/2012/01/24/120405"&gt;UbuntuにGoogle Chromeをインストールする - しがないまんとはなんですと！&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ユニットテストを実行するのには&lt;a href="https://github.com/airportyh/testem"&gt;Testem&lt;/a&gt;を使ってみた。Testemはテストランナーのツールでユニットテストの自動実行とかをしてくれるやつ。&lt;/p&gt;

&lt;p&gt;Node.jsは入ってる前提で、npmでインストール。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ npm install testem
&lt;/pre&gt;
&lt;p&gt;そしたら&lt;code&gt;testem launchers&lt;/code&gt;コマンドで今実行できるブラウザが表示されるので見てみる。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ ./node_modules/.bin/testem launchers
Have 2 launchers available; auto-launch info displayed on the right.

Launcher      Type          CI  Dev
------------  ------------  --  ---
Firefox       browser       ✔           
Chrome        browser       ✔ 
&lt;/pre&gt;
&lt;p&gt;ちゃんとFirefoxとChromeがある！&lt;/p&gt;

&lt;p&gt;そして、適当にtestemの設定ファイルとテストファイルを用意する。&lt;/p&gt;
&lt;pre class="highlight text"&gt;# testem.yml
framework: mocha
src_files:
  - expect.js
  - test.js
&lt;/pre&gt;&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// test.js
&lt;/span&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;document.body.tagName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should be BODY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;BODY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これでテストは通るはずだけどまだこのままだと動かない。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ ./node_modules/.bin/testem ci
# Launching Firefox
# 
TAP version 13
not ok 1 - Firefox &amp;quot;undefined&amp;quot;
  ---
    message: &amp;quot;Exited with code 1&amp;quot;
  ...

# Launching Chrome
# 
not ok 2 - Chrome &amp;quot;undefined&amp;quot;
  ---
    message: &amp;quot;Exited with code 1&amp;quot;
  ...


1..2
# tests 2
# fail  2
&lt;/pre&gt;
&lt;p&gt;なぜならまだXvfbを立ち上げてないのでディスプレイがなくてFirefoxもChromeも起動できない。&lt;/p&gt;

&lt;p&gt;なのでXvfbを立ち上げる。ホントはちゃんと起動スクリプトとか書いたほうがいいんだろうけどとりあえず適当に。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ Xvfb :99 -screen 0 1024x768x24 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/pre&gt;
&lt;p&gt;これで&lt;code&gt;:99.0&lt;/code&gt;でXvfbが立ち上がったのでこれを環境変数で指定してtestemを実行する。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ DISPLAY=:99.0 ./node_modules/.bin/testem ci
# Launching Firefox
# .
TAP version 13
ok 1 - Firefox document.body.tagName should be BODY

# Launching Chrome
# .
ok 2 - Chrome document.body.tagName should be BODY


1..2
# tests 2
# pass  2

# ok
&lt;/pre&gt;
&lt;p&gt;そうするとちゃんとFirefoxとChromeでテストが実行される。すごい。後はこれをJenkinsとかで走らせればOK。たぶんSeleniumのテストとかもこれで走らせられるね。&lt;/p&gt;

&lt;p&gt;ちなみにTravis CIはXvfbに対応してるんだけど現時点ではFirefoxしか入ってないっぽい。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://about.travis-ci.org/docs/user/gui-and-headless-browsers/"&gt;Travis CI: GUI &amp;amp; Headless browser testing on travis-ci.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;関係ないけどVagrant使うとこういうの手軽にまっさらな環境で試せるので楽チン。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Windows8のChromeやFirefoxはタッチイベントとマウスイベント両方考慮すべし</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2013/03/win8_chrome_touch_event.html"/>
    <id>http://webtech-walker.com/archive/2013/03/win8_chrome_touch_event.html</id>
    <published>2013-03-04T15:00:00Z</published>
    <updated>2013-03-04T15:00:00Z</updated>
    <content type="html">&lt;p&gt;タッチ系の操作をスマホでもデスクトップPCでも動くようにするため、タッチイベントがある場合は&lt;code&gt;touchstart&lt;/code&gt;や&lt;code&gt;touchmove&lt;/code&gt;を使い、タッチイベントをサポートしていないブラウザでは&lt;code&gt;mousedown&lt;/code&gt;や&lt;code&gt;mousemove&lt;/code&gt;を使って同じ挙動にするというケースがあります。&lt;/p&gt;

&lt;p&gt;例えばこういうやつ。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pxgrid.github.com/js-flipsnap/demo.html"&gt;flipsnap.js DEMO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そのようなケースでは僕はこれまで次のように書いていました。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;supportTouch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ontouchstart&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;touchStartEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;supportTouch&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;touchstart&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;touchMoveEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;supportTouch&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;touchmove&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mousemove&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;touchEndEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;supportTouch&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;touchend&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mouseup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;touchStartEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;touchMoveEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;touchEndEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;タッチ系のイベントがあるかどうかでバインドするイベントを決める感じです。&lt;/p&gt;

&lt;p&gt;しかし、これだとWindows8のChromeやFirefoxでマウスの操作が動きません。Windows8のChromeやFirefoxはタッチイベントをサポートしており、画面をタッチして操作した場合はタッチ系のイベントが、マウスで操作した場合はマウス系のイベントが発火するようになっています。&lt;/p&gt;

&lt;p&gt;なので上記のような処理だとタッチ系のイベントしかハンドラがバインドされず、マウスで操作しようとしたときに何もおきないということになります。&lt;/p&gt;

&lt;p&gt;対応方法は色々あると思うけど、flipsnap.jsでは&lt;code&gt;touchstart&lt;/code&gt;と&lt;code&gt;mousedown&lt;/code&gt;の両方にイベントをバインドしておいて、それらのイベントリスナの中でmoveイベントとendイベントをバインドし、endイベントでリスナを解除するみたいな感じにしました。&lt;/p&gt;

&lt;p&gt;ちなみにWindows8のIE10の場合はまたちょっと話が違ってきていて、MSPointerというポインターイベントがあってそれはこの前書いたのでそっちを参照のこと。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://webtech-walker.com/archive/2012/11/flipsnap_ie10_pointerevents.html"&gt;flipsnap.jsでIE10のPointer Eventsに対応した - Webtech Walker&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Backbone.js 0.9.10 の変更点</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2013/01/backbone_0.9.10.html"/>
    <id>http://webtech-walker.com/archive/2013/01/backbone_0.9.10.html</id>
    <published>2013-01-19T15:00:00Z</published>
    <updated>2013-01-19T15:00:00Z</updated>
    <content type="html">&lt;p&gt;Backbone.jsの0.9.10がリリースされました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://backbonejs.org/#changelog"&gt;Backbone.js - Change Log&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;変更点は次のような感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt;イベントはこれまではBackbone.historyで発火してたんですが、routerでも発火されるようになりました。&lt;/li&gt;
&lt;li&gt;バリデーションが走るのが&lt;code&gt;save&lt;/code&gt;メソッドのみになりました。&lt;code&gt;set&lt;/code&gt;メソッドやnewしたときには走りません。&lt;code&gt;save&lt;/code&gt;以外でもバリデーションを実行するにはオプションに&lt;code&gt;{validate:true}&lt;/code&gt;を指定します。&lt;/li&gt;
&lt;li&gt;バリデーションが失敗したときのイベントが&lt;code&gt;error&lt;/code&gt;から&lt;code&gt;invalid&lt;/code&gt;になりました。（本家のChange Logには未掲載）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;View#make&lt;/code&gt;が削除されました。代わりに&lt;code&gt;$&lt;/code&gt;を直接使ってDOM要素を初期化しましょう。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Model#change&lt;/code&gt;メソッドが削除されました。
Passing {silent:true} on change will no longer delay individual &amp;ldquo;change:attr&amp;rdquo; events, instead they are silenced entirely.&lt;/li&gt;
&lt;li&gt;これまでは&lt;code&gt;{silent:true}&lt;/code&gt;を指定してsetした属性は&lt;code&gt;change&lt;/code&gt;メソッドを呼ぶことで&lt;code&gt;change:xxx&lt;/code&gt;イベントが発火していましたが、その機能はなくなりました。&lt;code&gt;{silent:true}&lt;/code&gt;は単純にイベントが呼ばれないだけです。&lt;/li&gt;
&lt;li&gt;その他バグFixいくつか。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;バリデーションの挙動はここ最近でよく変わってるので注意が必要そうです。&lt;/p&gt;

&lt;p&gt;ちなみにドキュメントの冒頭に以下のようにあります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Backbone 0.9.10 should be considered as a release candidate for an upcoming 1.0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;0.9.10は1.0のRC版（リリース候補）ってことみたいですね。1.0が出るのは近そうだけどまだけっこう変わる可能性はありそうです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Backbone.js 0.9.9 の変更点</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/12/backbone_0.9.9.html"/>
    <id>http://webtech-walker.com/archive/2012/12/backbone_0.9.9.html</id>
    <published>2012-12-18T15:00:00Z</published>
    <updated>2012-12-18T15:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://www.adventar.org/calendars/15"&gt;Backbone.js Advent Calendar&lt;/a&gt;の19日目です。&lt;/p&gt;

&lt;p&gt;先週Backbone.jsの0.9.9がリリースされてけっこう変更点多いのでChange Logに書いてあるやつを簡単にまとめときます。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://backbonejs.org/#changelog"&gt;Backbone.js - Change Log&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また、先日清水さん（&lt;a href="https://twitter.com/tori3_jp"&gt;@tori3_jp&lt;/a&gt;）が以下のようなエントリを書いていて、いくつか重複する点がありますので、こちらも参照してください。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://tech.naver.jp/blog/?p=2342"&gt;Backbone.js 1.0に向けての変更点 « NAVER Engineers&amp;#39; Blog&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Events関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Eventsに&lt;code&gt;listenTo&lt;/code&gt;と&lt;code&gt;stopListening&lt;/code&gt;が追加されました。清水さんのエントリの追記の部分に詳しく書いてあります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Backbone&lt;/code&gt;オブジェクトが&lt;code&gt;Events&lt;/code&gt;を継承するようになりました。&lt;code&gt;Backbone.on(&amp;#39;foo&amp;#39;)&lt;/code&gt;みたいなグローバルなイベントが貼れるみたいです。&lt;/li&gt;
&lt;li&gt;jQueryの&lt;code&gt;one&lt;/code&gt;メソッドのように、一回だけイベントハンドラを実行する&lt;code&gt;once&lt;/code&gt;がEventsに追加されました。&lt;/li&gt;
&lt;li&gt;jQueryのように&lt;code&gt;obj.on({click: action})&lt;/code&gt;みたいなイベントの指定ができるようになりました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Model、Collection関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;collectionの&lt;code&gt;add&lt;/code&gt;メソッドのオプションで&lt;code&gt;{merge: true}&lt;/code&gt;が指定されていた場合、既存のモデルを更新するようになりました。これも清水さんのエントリに詳しく書いてあります。&lt;/li&gt;
&lt;li&gt;collectionに&lt;code&gt;update&lt;/code&gt;メソッドが追加されました。詳しくは&lt;a href="http://backbonejs.org/#Collection-update"&gt;ドキュメント&lt;/a&gt;を。&lt;/li&gt;
&lt;li&gt;collectionの&lt;code&gt;reset&lt;/code&gt;イベントハンドラの引数の&lt;code&gt;options&lt;/code&gt;に&lt;code&gt;previousModels&lt;/code&gt;という&lt;code&gt;reset&lt;/code&gt;される前のモデルのリストが渡されるようになりました。&lt;/li&gt;
&lt;li&gt;バリデーションが&lt;code&gt;silent&lt;/code&gt;オプションが&lt;code&gt;true&lt;/code&gt;のときも実行されるようになりました。また、それに伴って&lt;code&gt;isValid&lt;/code&gt;メソッドがなくなりました。&lt;/li&gt;
&lt;li&gt;Collectionで使えるUnderscore.jsのメソッドにエイリアスのメソッド名も使えるようになりました。（&lt;code&gt;collect&lt;/code&gt;, &lt;code&gt;inject&lt;/code&gt;, &lt;code&gt;foldl&lt;/code&gt;, &lt;code&gt;foldr&lt;/code&gt;, &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;など）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getByCid&lt;/code&gt;が削除され、&lt;code&gt;get&lt;/code&gt;メソッドで&lt;code&gt;id&lt;/code&gt;と&lt;code&gt;cid&lt;/code&gt;の両方を探すようになりました。&lt;/li&gt;
&lt;li&gt;Collectionの&lt;code&gt;sort&lt;/code&gt;メソッドが、&lt;code&gt;reset&lt;/code&gt;イベントの代わりに&lt;code&gt;sort&lt;/code&gt;イベントを発火するようになりました。&lt;/li&gt;
&lt;li&gt;modelの&lt;code&gt;isNew&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;のときに&lt;code&gt;destroy&lt;/code&gt;を呼んだら&lt;code&gt;false&lt;/code&gt;を返すようになりました（って書いてあるけど実際は0.9.2からこの挙動です）。&lt;/li&gt;
&lt;li&gt;modelやcollectionでフェッチした後、定義した全ての&lt;code&gt;parse&lt;/code&gt;メソッドが実行されるようになりました。（これについてはコードも読んだけど、どう変わったのかよくわからなかったので原文載せときます）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;After fetching a model or a collection, all defined &lt;code&gt;parse&lt;/code&gt; functions will now be run. So fetching a collection and getting back new models could cause both the collection to parse the list, and then each model to be parsed in turn, if you have both functions defined.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;collectionでfetchしたときに新しいmodelがあったらそのmodelに対しても&lt;code&gt;parse&lt;/code&gt;が呼ばれるみたいな感じな気がするんだけど0.9.2のころからそうだったしなあという感じでよくわかりません。&lt;/p&gt;

&lt;h2&gt;View関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Viewの&lt;code&gt;options&lt;/code&gt;、&lt;code&gt;el&lt;/code&gt;、&lt;code&gt;tagName&lt;/code&gt;に関数を指定すると実行時に評価されるようになりました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Sync関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTTPの&lt;code&gt;PATCH&lt;/code&gt;メソッドをサポートするようになりました。&lt;code&gt;save&lt;/code&gt;メソッドのオプションで&lt;code&gt;{patch: true}&lt;/code&gt;にすると&lt;code&gt;PUT&lt;/code&gt;のところが&lt;code&gt;PATCH&lt;/code&gt;になります。&lt;br&gt;
&lt;code&gt;PATCH&lt;/code&gt;メソッドについては以下のエントリがわかりやすいです。&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/ZIGOROu/20120211/1328982756"&gt;PATCH メソッド、新しい HTTP Status Code - Yet Another Hackadelic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Backbone.sync&lt;/code&gt;に&lt;code&gt;request&lt;/code&gt;イベントが追加されました（実際にはModelやCollectionに対して発火します）。サーバーへのリクエストを開始したときに発火します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emulateHTTP&lt;/code&gt;と&lt;code&gt;emulateJSON&lt;/code&gt;がメソッド呼び出し時のオプションとして指定できるようになりました。&lt;/li&gt;
&lt;li&gt;Backbone.ajaxというフックが追加されました。この関数を上書きすることで&lt;code&gt;Backbone.sync&lt;/code&gt;のAjax部分の動作を変更できます。デフォルトでは&lt;code&gt;Backbone.$.ajax&lt;/code&gt;が使われます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Router関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Router&lt;/code&gt;のURLにオプションを指定できるようになりました。&lt;code&gt;docs/:section(/:subsection)&lt;/code&gt;のような感じで&lt;code&gt;()&lt;/code&gt;の部分はあってもなくてもいいようなURLが指定できます。&lt;/li&gt;
&lt;li&gt;ルーターの定義のところで、先頭と末尾のスラッシュの正規化のバグを修正しました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;その他&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DOM操作やAjaxの呼び出しを行うためのjQuery互換ライブラリの差し替えを行うのに&lt;code&gt;setDomLibrary&lt;/code&gt;というメソッドが用意されていましたが、これが削除され、&lt;code&gt;Backbone.$&lt;/code&gt;を差し替えるようになりました。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Backbone.wrapError&lt;/code&gt;が削除されました。（現時点でgh-pagesブランチには乗ってないけど&lt;a href="https://github.com/documentcloud/backbone/commit/5a4d405f640ac4b843e8c3ffd6eb0ae52d7f9b4a"&gt;masterブランチのコミット&lt;/a&gt;にあったので掲載）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上ですが、けっこう多いですね。1.0でまたどれくらい変わるかがきになるところです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Backbone.Modelのattributesにオブジェクト入れるときの注意</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/12/backbone_model_object.html"/>
    <id>http://webtech-walker.com/archive/2012/12/backbone_model_object.html</id>
    <published>2012-12-14T15:00:00Z</published>
    <updated>2012-12-14T15:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://www.adventar.org/calendars/15"&gt;Backbone.js Advent Calendar&lt;/a&gt;の15日目です。軽めにいきます。&lt;/p&gt;

&lt;p&gt;Backbone.Modelの&lt;code&gt;attributes&lt;/code&gt;にオブジェクトを設定するときの注意点など。&lt;code&gt;attributes&lt;/code&gt;は&lt;code&gt;set&lt;/code&gt;とかで設定される値をオブジェクトして持っているやつです。&lt;/p&gt;

&lt;p&gt;まず次のように&lt;code&gt;set&lt;/code&gt;で&lt;code&gt;attributes&lt;/code&gt;を設定します。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MyModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyModel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;baz&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;このように&lt;code&gt;hoge&lt;/code&gt;には文字列、&lt;code&gt;foo&lt;/code&gt;にはオブジェクトを設定しました。そして&lt;code&gt;toJSON&lt;/code&gt;で&lt;code&gt;attributes&lt;/code&gt;を取得して値を更新してみます。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;new fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;new baz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;そして&lt;code&gt;attributes&lt;/code&gt;の中身を見てみると・・&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; { hoge: &amp;#39;fuga&amp;#39;, foo: { bar: &amp;#39;new baz&amp;#39; } }
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hoge&lt;/code&gt;の値は変わってないのに&lt;code&gt;foo.bar&lt;/code&gt;の値が変わってますね。どうしてこうなった。&lt;/p&gt;

&lt;p&gt;と、まあこういう問題があるわけです。&lt;/p&gt;

&lt;p&gt;では原因を見て行きましょう。まず、&lt;code&gt;toJSON&lt;/code&gt;の実装は次のようになっています。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;このように&lt;code&gt;attributes&lt;/code&gt;を&lt;code&gt;_.clone&lt;/code&gt;してるだけです。&lt;code&gt;_.clone&lt;/code&gt;してるということは参照ではなくてオブジェクトのコピーが返りそうな雰囲気です。コピーが返るということは返ってきた値を変更しても元のオブジェクトには影響しないはず・・。&lt;/p&gt;

&lt;p&gt;なんですが、実は&lt;code&gt;_.close&lt;/code&gt;はネストしたオブジェクトに対応しておらず、ネストしている場合はそのまま参照がコピーされるのです。なんてこったい＼(^o^)／&lt;/p&gt;

&lt;p&gt;なので&lt;code&gt;hoge&lt;/code&gt;の値は変更しても元の値は影響を受けておらず、&lt;code&gt;foo.bar&lt;/code&gt;の値を変更したら元のオブジェクトにも影響がでてしまったというわけ。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;code&gt;_.close&lt;/code&gt;の実装は次のようになってて&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;_.extend({}, obj)&lt;/code&gt;を返してるだけなので元凶は&lt;code&gt;_.extend&lt;/code&gt;だったりします。&lt;code&gt;_.extend&lt;/code&gt;は次のようにネストしたオブジェクトに対応してないのがわかります。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;baz&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { foo: { hoge: &amp;#39;fuga&amp;#39; } }
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;この問題を解決できるのは我らがjQuery大先生です。jQueryの&lt;code&gt;$.extend&lt;/code&gt;は第一引数を&lt;code&gt;true&lt;/code&gt;にすることでネストしたオブジェクトにも対応できます。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;baz&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hoge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { foo: { bar: &amp;#39;baz&amp;#39;, hoge: &amp;#39;fuga&amp;#39; } }
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;すばらしいですね。これを利用して次のように&lt;code&gt;toJSON&lt;/code&gt;を上書きします。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MyModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これで大丈夫なはず。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyModel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;baz&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hoge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;new fuga&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;new baz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; { hoge: &amp;#39;fuga&amp;#39;, foo: { bar: &amp;#39;baz&amp;#39; } }
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;おっけーですねー。すばらしいですねー。jQueryまじイノベーティブです。&lt;/p&gt;

&lt;p&gt;以上、&lt;del&gt;jQuery&lt;/del&gt;&lt;ins&gt;Backbone.js&lt;/ins&gt; Advent Calendarでした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Backbone.jsでNode.jsとクライアントサイドのロジックをイケてる感じで共通化する</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/12/backbone_node_common.html"/>
    <id>http://webtech-walker.com/archive/2012/12/backbone_node_common.html</id>
    <published>2012-12-10T15:00:00Z</published>
    <updated>2012-12-10T15:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://www.adventar.org/calendars/15"&gt;Backbone.js Advent Calendar&lt;/a&gt;の12日目です。&lt;/p&gt;

&lt;p&gt;Backbone.jsを使ってNode.jsとクライアントサイドのJavaScriptでロジックを共有する方法について書いてみます。&lt;/p&gt;

&lt;p&gt;Node.jsといえばチャット。チャットといえばSocket.IOということでSocket.IOを使ったチャットを例にしてみます。&lt;/p&gt;

&lt;p&gt;例えばチャットの一回の文字列の上限を140文字にしたいとします。その場合クライアント側でもサーバー側でも同じバリデーションのロジックを実装するのは面倒ですし、上限値が変更になったときに2箇所変更するのはイケてないですね。そこでBackbone.jsを使ってその部分のロジックを共通化する方法を考えてみます。&lt;/p&gt;

&lt;p&gt;Backbone.jsはnpmでインストールできるのでまずはBackbone.jsとSocket.IOをインストールします。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ npm install backbone socket.io
&lt;/pre&gt;
&lt;p&gt;次に、サーバーサイドとクライアントサイドの共通のロジックを記述するmodelBase.jsというモデルを作ります。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// modelBase.js
&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Backbone&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;backbone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;TEXT_LIMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MessageBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;TEXT_LIMIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text is too long&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// その他共通のロジック
&lt;/span&gt;  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MessagesBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// 共通のロジック
&lt;/span&gt;  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;**&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Expose&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
  root.MessagesBase = MessagesBase;&lt;/span&gt;
  &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessageBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MessageBase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;イケてるポイントはここや&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Backbone&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;backbone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ここでサーバーサイド、クライアントサイドのどちらでも使えるようにしてるところです。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessagesBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MessagesBase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessageBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MessageBase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;次にNode.js側でこのmodelBase.jsを継承したmodel.jsをつくります。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// server: model.js
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;modelBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./modelBase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;modelBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessageBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// サーバー側のロジック
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;modelBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessagesBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt;

  &lt;span class="c1"&gt;// サーバー側のロジック
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Messages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;そしてイケてるチャットアプリのapp.jsでmodel.jsで定義した&lt;code&gt;Messages&lt;/code&gt;を使ってチャットのメッセージを管理します。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// server: app.js
&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;socket.io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3030&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Messages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Messages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// modelBaseを静的ファイルとして配信
&lt;/span&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;static&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/modelBase.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/modelBase.js&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sockets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// なんかチャットのロジック
&lt;/span&gt;
  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// バリデーションが通ったらbroadcast（pushはバリデーションが通らなかったらfalseを返す）
&lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ここでのイケてるポイントはこんな感じでmodelBase.jsを配信してることですね。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// modelBaseを静的ファイルとして配信
&lt;/span&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;static&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/modelBase.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/modelBase.js&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;expressと併用してる場合などはそっちで配信してもいいと思います。&lt;/p&gt;

&lt;p&gt;そうするとクライアント側では、次のようにmodelBase.jsを読み込むことができます。（Backbone.jsとかUnderscore.jsとかはこの前に読み込んでる前提）&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:3030/socket.io/socket.io.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:3030/socket.io/modelBase.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;そうしたらクライアント側も同じようにmodelBaseを継承してモデルを実装することができます。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="c1"&gt;// client: model.js
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessageBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// クライアント側のロジック
&lt;/span&gt;  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessagesBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// クライアント側のロジック
&lt;/span&gt;  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Messages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Messages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// createしたらイケてる感じでsocket.emitするようにしとく
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input[type=&amp;quot;text&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;バリデーションエラー！&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;このように簡単にロジックを共通化することができます。イケてますね。&lt;/p&gt;

&lt;p&gt;また、Backbone.Syncをサーバー側ではRedisやmongodb、クライアント側ではsocketを使った処理に差し替えればさらにイケてるチャットアプリにすることができそうです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>nodebrewでバイナリからインストールできるようにした</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/12/nodebrew_update.html"/>
    <id>http://webtech-walker.com/archive/2012/12/nodebrew_update.html</id>
    <published>2012-12-09T15:00:00Z</published>
    <updated>2012-12-09T15:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/hokaccha/nodebrew"&gt;nodebrew&lt;/a&gt;の0.6.0をリリースしました。&lt;code&gt;install-binary&lt;/code&gt;というコマンドを追加しまして、コンパイル済みのバイナリからインストールできるようにしました。&lt;/p&gt;

&lt;p&gt;バイナリのファイルはNode.jsのv0.8.6以降で配布されるようになったので、それ以前のバージョンはインストールできません。Mac OSX、Linux、Solaris用のがそれぞれ32bitと64bitのものが用意されていて、nodebrewがアーキテクチャから自動で判別してとってくるようにしています。OSXとUbuntuくらいでしか試してないので動かなかった場合は報告ください。&lt;/p&gt;

&lt;p&gt;こんな感じです。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ nodebrew install-binary v0.8.6
fetch: http://nodejs.org/dist/v0.8.6/node-v0.8.6-darwin-x64.tar.gz
######################################################################## 100.0%
install success
&lt;/pre&gt;
&lt;p&gt;これまでコンパイルが必要だったのでインストールに時間がかかっていましたが、バイナリだとダウンロードして展開するだけなんでちょっぱやで終わります。&lt;/p&gt;

&lt;p&gt;最初は&lt;code&gt;install&lt;/code&gt;コマンドと統合しようと思ったんだけどいきなり統合するのもアレなのでひとまず様子見で別コマンドにしてます。将来的には&lt;code&gt;install&lt;/code&gt;コマンドに統合してオプションとかで切り替えられるようにするかもしれません。&lt;/p&gt;

&lt;p&gt;あと、人知れずちょっと前のバージョンアップで&lt;a href="https://twitter.com/hide_o_55"&gt;@hide_o_55&lt;/a&gt;さんが実装してくれた&lt;code&gt;migrate-package&lt;/code&gt;というコマンドが入っています。これは&lt;code&gt;npm install -g&lt;/code&gt;でグローバルにインストールしたモジュールを移行してくれるコマンドです。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ nodebrew migrate-package v0.6.4
&lt;/pre&gt;
&lt;p&gt;とかやるとv0.6.4でグローバルにインストールされているモジュールをカレントのバージョンにも&lt;code&gt;npm install -g&lt;/code&gt;でインストールしてくれます。便利。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nodebrew selfupdate&lt;/code&gt;コマンドでアップデートできるのでぜひ使ってみてください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>jQueryの非推奨な機能</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/12/jquery_deprecated.html"/>
    <id>http://webtech-walker.com/archive/2012/12/jquery_deprecated.html</id>
    <published>2012-12-02T15:00:00Z</published>
    <updated>2012-12-02T15:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://www.adventar.org/calendars/29"&gt;軽めのjQuery Advent Calendar 2012&lt;/a&gt; 3日目の記事です。jQueryのDeprecated（非推奨）な機能をいくつか紹介します。&lt;/p&gt;

&lt;h2&gt;$.browser&lt;/h2&gt;

&lt;p&gt;これは有名ですね。ブラウザで分岐するんじゃなくて機能があるかないかで分岐するのがいいから$.supportを使えよって話です。&lt;/p&gt;

&lt;p&gt;まあIE6だけで起きるバグとかのためにブラウザ判定するのはありだと思いまけどjQuery的には$.browserは非推奨らしいです。&lt;/p&gt;

&lt;h2&gt;.live()&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;.live()&lt;/code&gt;は非推奨で&lt;code&gt;.on()&lt;/code&gt;とか&lt;code&gt;.delegate()&lt;/code&gt;で同じ事でできるのでこっちを使うのを推奨してるみたいです。&lt;/p&gt;

&lt;h2&gt;.size()&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;.size()&lt;/code&gt;はjQueryオブジェクトの要素数を返すメソッドですが、これが非推奨な理由は&lt;code&gt;.size()&lt;/code&gt;と&lt;code&gt;.length&lt;/code&gt;は同じで&lt;code&gt;.size()&lt;/code&gt;のほうが関数呼び出しのオーバーヘッドがかかるから&lt;code&gt;.length&lt;/code&gt;のほうがいいよってことらしいです。&lt;/p&gt;

&lt;h2&gt;:checkbox、:radio、:submitなどのセレクタ&lt;/h2&gt;

&lt;p&gt;checkboxの要素を探したりするのに&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:checkbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;とかいうjQueryの独自セレクタが使えるわけですが、これも実は非推奨です。&lt;/p&gt;

&lt;p&gt;なぜかというと、次のように書いても同じで、&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[type=checkbox]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;:checkbox&lt;/code&gt;は独自セレクタなのに対して&lt;code&gt;[type=checkbox]&lt;/code&gt;は&lt;code&gt;querySelector&lt;/code&gt;などでパースできるためこっちのほうが早いからです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:button&lt;/code&gt;、&lt;code&gt;:file&lt;/code&gt;、&lt;code&gt;:image&lt;/code&gt;なども同じ理由で非推奨です。&lt;/p&gt;

&lt;h2&gt;その他の非推奨な機能&lt;/h2&gt;

&lt;p&gt;Deprecatedな機能は他にもいっぱいあって、一覧は以下に全部のってます。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://api.jquery.com/category/deprecated/"&gt;Deprecated – jQuery API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;軽めなんでドキュメント見ればすぐわかる内容のエントリでした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>最近のLessのextendの進捗</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/12/less_extend.html"/>
    <id>http://webtech-walker.com/archive/2012/12/less_extend.html</id>
    <published>2012-11-30T15:00:00Z</published>
    <updated>2012-11-30T15:00:00Z</updated>
    <content type="html">&lt;p&gt;今年も始まりましたAdvent Calendar。このエントリーは&lt;a href="http://www.adventar.org/calendars/1"&gt;CSS Preprocessor Advent Calendar 2012&lt;/a&gt;の一日目です。&lt;/p&gt;

&lt;p&gt;去年は&lt;a href="http://atnd.org/events/21919"&gt;Less &amp;amp; Sass Advent calendar&lt;/a&gt;というのをやりましたが、今年はSassやLessだけじゃなく、Stylusなども含めてCSS Preprocessorというくくりにしてみました。まだ最後のほうに空きがあるので我こそはと思われる方はぜひ参加してみてください。&lt;/p&gt;

&lt;p&gt;また、Advent Calendarとは関係ないですが、&lt;a href="https://groups.google.com/forum/?hl=ja&amp;amp;fromgroups#!forum/css-preprocessor-jp"&gt;CSS Preprocessor JP&lt;/a&gt;というグループをつくったので興味がある人はぜひ参加してみてください。Sassのインストールの仕方がわからないとか、最近はどういうのが流行ってるかなど意見交換の場にしてもらえればと思っています。きっとAdvent Calendarの参加者の人たちあたりがビシッと教えてくれるはずです。&lt;/p&gt;

&lt;p&gt;さて本題。去年のAdvent Calendarのときに&lt;a href="http://d.hatena.ne.jp/hokaccha/20111214/1323821463"&gt;Lessにextendを実装してみた&lt;/a&gt;んですが、しばらくとりこまれる気配がなくて、最近になって開発がさかんになり、1_4_0ブランチに取り込まれました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cloudhead/less.js/tree/1_4_0"&gt;cloudhead/less.js at 1_4_0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;取り込まれてからも&lt;a href="https://github.com/cloudhead/less.js/pull/509"&gt;シンタックスに関する議論&lt;/a&gt;が活発に続いており、紆余曲折ありましたが、今は以下の様なシンタックスに落ち着いたようです。（が、まだ変わる可能性はあります）&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;span class="nc"&gt;.foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;:extend(.foo);&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これをコンパイルすると次のようになります。&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;span class="nc"&gt;.foo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;最初僕が実装したときは&lt;code&gt;+.foo&lt;/code&gt;みたいなシンタックスだったんですが、隣接セレクタみたいでわかりにくいということで&lt;code&gt;++.foo&lt;/code&gt;になって、それもやっぱ微妙だねということで&lt;code&gt;&amp;amp;:extend(.foo)&lt;/code&gt;のようになったみたいです。&lt;/p&gt;

&lt;p&gt;たしかにわかりやすいとは思うけどLessっぽくはないなあと思いつつ、Lessらしさが何なのか語れるほどLessを使ってないので議論には参加してません。&lt;/p&gt;

&lt;p&gt;このくらいライトな記事でもいいのでぜひAdvent Calendarに参加してみてください！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>flipsnap.jsでIE10のPointer Eventsに対応した</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/11/flipsnap_ie10_pointerevents.html"/>
    <id>http://webtech-walker.com/archive/2012/11/flipsnap_ie10_pointerevents.html</id>
    <published>2012-11-15T15:00:00Z</published>
    <updated>2012-11-15T15:00:00Z</updated>
    <content type="html">&lt;p&gt;flipsnap.jsをWindows8のIE10のタッチで動くようにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pxgrid.github.com/js-flipsnap/"&gt;flipsnap.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;思ったより簡単に対応できました。diffはこんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pxgrid/js-flipsnap/commit/0524fefdbd8e2b02625a00fada9e2d3f9c73b2ef"&gt;IE10 for touch device support. Fix #13 · 0524fef · pxgrid/js-flipsnap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IE10はiOSやAndroidのように&lt;code&gt;touchstart&lt;/code&gt;や&lt;code&gt;touchmove&lt;/code&gt;のようなタッチイベントが用意されておらず、代わりにタッチした際に、pointerイベントというイベントが発火します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.w3.org/Submission/pointer-events/"&gt;Pointer Events Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.msdn.com/b/ie/archive/2011/09/20/touch-input-for-ie10-and-metro-style-apps.aspx"&gt;Touch Input for IE10 and Metro style Apps - IEBlog - Site Home - MSDN Blogs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まだ&lt;code&gt;MSPointerDown&lt;/code&gt;のように&lt;code&gt;MS&lt;/code&gt;というprefixがついています。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MSPointerDown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// タッチが始まった時の処理
&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MSPointerMove&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// タッチが動いている時の処理
&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MSPointerUp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// タッチが終わった時の処理
&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;基本的にはmouseイベントやtouchイベントと同じように使えるので、イベント名だけ変更すれば対応はできます。また、&lt;code&gt;window.navigator.msPointerEnabled&lt;/code&gt;の値を見てpointerイベントが使用可能かどうかを判断することができます。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;support&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mspointer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msPointerEnabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;touch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ontouchstart&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;touchStartEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;support&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mspointer&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MSPointerDown&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;support&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touch&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;touchstart&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;touchStartEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// タッチが始まった時の処理
&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;また、1点注意が必要で、CSSで&lt;code&gt;-ms-touch-action: none;&lt;/code&gt;というのを指定しないとタッチしたときにネイティブのスクロールなどが優先されてpointerイベントがちゃんと発火しません。JavaScriptからこのプロパティを設定するには次のようにします。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;support&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mspointer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msTouchAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;CSSでやるならこうです。&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;span class="nf"&gt;#element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-ms-touch-action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;今回のflipsnap.jsでの対応は将来的にまだpointerイベントがどうなるかわからないので&lt;code&gt;MS&lt;/code&gt;のプレフィックス限定で対応しています。将来的にプレフィックスが外れたり他のブラウザでも対応が始まった場合はその都度対応していく予定です。&lt;/p&gt;

&lt;p&gt;また、Windows8のタッチ対応端末で確認したところ、Chromeはtouchイベント、Firefoxはmouseイベントが発火していたのでそのままで使えてました。なかなかタッチイベントまわりカオスな状況ですね。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Advent Calendarの登録サイトつくりました</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/11/adventar.html"/>
    <id>http://webtech-walker.com/archive/2012/11/adventar.html</id>
    <published>2012-10-31T15:00:00Z</published>
    <updated>2012-10-31T15:00:00Z</updated>
    <content type="html">&lt;p&gt;もうすぐAdvent Calendarの季節なわけですが、いかがお過ごしてしょうか。僕も毎年なんらかのAdvent Calendarに参加したり、去年はSass Less Advent Calendarなどを立てたりしました。&lt;/p&gt;

&lt;p&gt;最近はけっこうATNDでAdvent Calendarを募集することが多いみたいなんですが、ATNDは何日に書くことになるのかわかりにくく、順番も決めづらいなどAdvent Calendarの募集には向いてないと個人的には思ってたので、Advent Calendarの登録サイトを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.adventar.org/"&gt;Adventar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;任意の日付にボタン一つで登録できるのでATNDよりは簡単でいいかなと思います。&lt;/p&gt;

&lt;p&gt;思いついて特急で作ったんでバグってるところとかつかいにくいとことがあると思いますけどちょいちょい直していく予定です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;エントリー公開後にタイトルとURLを入力できるようにする&lt;/li&gt;
&lt;li&gt;GoogleカレンダーとかiCalでカレンダーの予定を読めるようにする&lt;/li&gt;
&lt;li&gt;デザインとか使い勝手調整&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などはやろうと思ってます。&lt;/p&gt;

&lt;p&gt;ちなみにフレームワークにはRailsを使っていてサーバーには&lt;a href="http://sqale.jp/"&gt;Sqale&lt;/a&gt;を使ってます。Sqaleはちょうど試してみようと思ってたところにこの前のYAPCで3ヶ月無料クーポンもらったんでラッキーでした。サーバーの設定初めてから1時間くらいでデプロイできたんで超簡単でした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>「ノンプログラマのためのJavaScriptはじめの一歩」の1章が公開されました</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/10/jsippo_release_intro.html"/>
    <id>http://webtech-walker.com/archive/2012/10/jsippo_release_intro.html</id>
    <published>2012-10-30T15:00:00Z</published>
    <updated>2012-10-30T15:00:00Z</updated>
    <content type="html">&lt;p&gt;11/7発売予定の書籍「&lt;a href="http://www.amazon.co.jp/dp/4774153761"&gt;ノンプログラマのためのJavaScriptはじめの一歩&lt;/a&gt;」のはじめにと1章が先行して技評のWebサイトで公開されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gihyo.jp/magazine/wdpress/plus/978-4-7741-5376-6/0001"&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gihyo.jp/magazine/wdpress/plus/978-4-7741-5376-6/0002"&gt;1章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1章はイントロ的なところで、JavaScriptを学ぶ前にJavaScriptの動かし方やデバッグツールの使い方について解説しています。&lt;/p&gt;

&lt;p&gt;また、本書籍の2章以降で解説するスライドショーのサンプルプログラムも1章で登場するため公開されています。次のようにボタンを押すと次の画像に行くというだけの、簡単なサンプルプログラムです。&lt;/p&gt;

&lt;p&gt;{::nomarkdown}
&lt;figure&gt;
&lt;iframe src="/sample/2012-10-31-jsippo_release_intro/index.html" width="650" height="550" frameborder="none" style="border: 1px solid #000; background: #FFF; margin: 0 auto;"&gt;&lt;/iframe&gt;
&lt;/figure&gt;
{:/nomarkdown}&lt;/p&gt;

&lt;p&gt;&lt;a href="http://image.gihyo.co.jp/assets/files/book/2012/978-4-7741-5376-6/chapter1/1-5-1_slideshow-1/index.html"&gt;技評のWebサイト&lt;/a&gt;からも実際に試すことができます。&lt;/p&gt;

&lt;p&gt;JavaScriptのソースはこんなかんじです。全体で90行程度、コメントや空行を除くと40行程度です。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="o"&gt;/**&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;簡易スライドショー&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="err"&gt;ボタンを押したときに画像を切り替える簡単な&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;スライドショーのサンプルプログラムです。&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;

window.onload = function() {&lt;/span&gt;

    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;*============================&lt;/span&gt;
     &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;変数の定義&lt;/span&gt;
     &lt;span class="o"&gt;*===========================*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;

    // 写真のリストの定義&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;photoList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;img/spring.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;春の桜&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;img/summer.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;夏のひまわり&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;img/autumn.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;秋の紅葉&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;img/winter.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;冬の山&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;photoLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;photoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// 要素の取得
&lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;photo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;photo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nextBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nextBtn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 現在のインデックスを保存するための変数
&lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;*============================&lt;/span&gt;
     &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;関数の定義&lt;/span&gt;
     &lt;span class="o"&gt;*===========================*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;

    // 指定の写真に表示を切り替える関数&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showPhoto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 全ての画像を非表示
&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;photoLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;photoList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// 表示する対象の要素を取得
&lt;/span&gt;        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;targetPhoto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;photoList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// タイトルを表示
&lt;/span&gt;        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;viewNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;viewNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;] &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;targetPhoto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// 画像を表示
&lt;/span&gt;        &lt;span class="nx"&gt;targetPhoto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;inline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;/*============================&lt;/span&gt;
     &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;イベントの設定&lt;/span&gt;
     &lt;span class="o"&gt;*===========================*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;

    // nextボタンのイベントを設定&lt;/span&gt;
    &lt;span class="nx"&gt;nextBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 表示するインデックスを計算
&lt;/span&gt;        &lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;photoLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// 画像を切り替える
&lt;/span&gt;        &lt;span class="nx"&gt;showPhoto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;*============================&lt;/span&gt;
     &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;初期化処理&lt;/span&gt;
     &lt;span class="o"&gt;*===========================*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;

    // img要素をHTMLに追加&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;photoLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;photoList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// img要素を作成
&lt;/span&gt;        &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// 作成したimg要素に属性を設定
&lt;/span&gt;        &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// 作成したimg要素をHTMLに追加
&lt;/span&gt;        &lt;span class="nx"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// 作成したimg要素を保存
&lt;/span&gt;        &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 初期表示のためにshowPhotoを一度だけ実行する
&lt;/span&gt;    &lt;span class="nx"&gt;showPhoto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;見る人が見れば突っ込みどころもあるとは思いますが、ひとつのサンプルにループや分岐や関数、イベントやDOM操作など、できるだけ詰め込んで何度もリライトした結果こうなっています。&lt;/p&gt;

&lt;p&gt;本書籍ではこのサンプルプログラムを完全に理解することを一つの目標にしています。&lt;/p&gt;

&lt;p&gt;2章と3章ではJavaScriptの文法やDOMの基本を解説するのですが、文法や機能を解説するごとに、このプログラムのどこでそれが使われているかを確認し、実際にどのように使われるかを解説したり、どこまでサンプルプログラムを理解できたかを細かく振り返ります。&lt;/p&gt;

&lt;p&gt;そして4章ではこのプログラムの流れを解説しながら「読む」ということと、どのようにして一からこのプログラムを「書く」かという二つの視点からプログラムの全体像について解説します。&lt;/p&gt;

&lt;p&gt;最後に5章でjQueryについて解説してこのスライドショーをjQueryでも書いてみて、アニメーションなどの機能を付け加えた、より実践的なプログラムにするというのが全体の構成です。&lt;/p&gt;

&lt;p&gt;もし1章とサンプルプログラムを見て興味を持った方は購入をご検討ください！&lt;/p&gt;

&lt;figure&gt;
  &lt;a href="http://amazon.jp/dp/4774153761"&gt;
  &lt;img src="/img/posts/2012-10-23-jsippo/cover.png" alt="ノンプログラマのための JavaScriptはじめの一歩" width="400" height="568"&gt;
  &lt;figcaption&gt;Amazon.co.jp： ノンプログラマのための JavaScriptはじめの一歩&lt;/figcaption&gt;
  &lt;/a&gt;
&lt;/figure&gt;
</content>
  </entry>
  <entry>
    <title>lessのextendがexperimentalなブランチにマージされたようです</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/10/less_extend_experimental.html"/>
    <id>http://webtech-walker.com/archive/2012/10/less_extend_experimental.html</id>
    <published>2012-10-28T15:00:00Z</published>
    <updated>2012-10-28T15:00:00Z</updated>
    <content type="html">&lt;p&gt;一年くらい前に僕がpull requestしたSassのextendみたいな機能をlessにも実装するってやつが実験的なブランチにマージされたっぽい。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cloudhead/less.js/pull/509"&gt;Add Sass like extend by hokaccha · Pull Request #509 · cloudhead/less.js&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cloudhead/less.js/tree/1_4_0"&gt;cloudhead/less.js at 1_4_0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;シンタックスが&lt;code&gt;+&lt;/code&gt;は隣接セレクタと間違えそうだからってことで&lt;code&gt;++&lt;/code&gt;になってる。&lt;/p&gt;

&lt;p&gt;こんな感じのlessファイルをコンパイルすると&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;span class="nc"&gt;.foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;++.foo;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;結果はこうなる。&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;span class="nc"&gt;.foo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;npmはgithubからモジュールをインストールできて&lt;code&gt;#&lt;/code&gt;以降にブランチ名を指定すれば特定のブランチのものを取ってくるので次のようにすれば試すことができる。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ cd path/to/working_dir
$ npm install git://github.com/cloudhead/less.js.git#1_4_0
$ ./node_modules/.bin/lessc test.less
.foo,
.bar {
  color: red;
}
.bar {
  font-size: 13px;
}
&lt;/pre&gt;
&lt;p&gt;lessの作者のcloudheadさんがやる気なくしたのかなんなのか、まったくコミットしなくなってlessはもう終わりだみたいな感じに一時期なっていて、extendのやつも全く取り込まれる気配がなかったんだけど、最近では別の人が開発を引き継いで開発が進んでるようで、extendもそういう流れで取り込まれたみたい。&lt;/p&gt;

&lt;p&gt;masterにいつマージされるか（そもそもマージされるかどうか）はまだ未定だけど早く使えるようになるといいな。&lt;/p&gt;

&lt;p&gt;ちなみにそんな僕は最近Sass派。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>mochaとphantomJSとtravis-ciでフロントエンドJavaScriptのテスト</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/10/mocha_phantomjs_travisci.html"/>
    <id>http://webtech-walker.com/archive/2012/10/mocha_phantomjs_travisci.html</id>
    <published>2012-10-22T15:00:00Z</published>
    <updated>2012-10-22T15:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://atnd.org/events/33022"&gt;東京Node学園祭2012 アドベントカレンダー&lt;/a&gt;の9日目です。Node.jsとほとんど関係ないうえに内容がけっこう薄い感じなった気がするんですけど気にせずいこうと思います。&lt;/p&gt;

&lt;p&gt;フロントエンドのJavaScriptをテストするとき最近はいつもmochaを使ってるんですが、やはりJenkinsとかtravis-ciを使って自動テストもしたいと思って試してみました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hokaccha/mocha-phantom-travis-test"&gt;hokaccha/mocha-phantom-travis-test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここではよくあるjQueryで画像のロールオーバーをするというプラグインを作ってそのライブラリに対してテストを書いています。ソースコードはこんな感じです。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rollover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;src_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/_off\.(\w+)$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_on.$1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mouseenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;src_on&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mouseleave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;画像名に&lt;code&gt;_off&lt;/code&gt;という文字列がある場合にマウスオーバーで&lt;code&gt;_on&lt;/code&gt;に切り替えるといういたって普通のロールオーバーのプラグインです。こんな感じで動きます。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://hokaccha.github.com/mocha-phantom-travis-test/example/"&gt;rollover sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このプラグインに対してmochaでテストを書くとこのようになります。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jquery.rollover&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;off&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../example/menu01_off.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../example/menu01_on.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;img&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;rollover&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mouseenterで_offが_onになること&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mouseenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mouseleaveで_onが_offになること&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mouseenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mouseleave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ブラウザでテストを実行するとこんな感じになります。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://hokaccha.github.com/mocha-phantom-travis-test/test/"&gt;Test | jquery.rollover&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このテストをphantomJSで実行できるようにします。mochaのテストをphantomJSで実行できるようにするのに&lt;a href="https://github.com/metaskills/mocha-phantomjs"&gt;mocha-phantomjs&lt;/a&gt;というのものがあります。mochaはreporterにspecやtapを指定してブラウザで実行した場合&lt;code&gt;console.log&lt;/code&gt;で出力するのでphantomJSの&lt;code&gt;onConsoleMessage&lt;/code&gt;とか使えば簡単に書けそうだったので自分で書いてみようと思ったんですけど予想以上に面倒なことが多かったのでおとなしくこのライブラリをつかうことにしました。&lt;/p&gt;

&lt;p&gt;mocha-phantomjsをnpmでインストールするようにしてもいいんですが、フロントエンドのコードしかないプロジェクトにnodeとかnpmの依存が入るのはどうかと思ったので必要なファイルだけもってきて設置しました。必要なのは以下の2ファイルです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/metaskills/mocha-phantomjs/blob/master/lib/mocha-phantomjs.coffee"&gt;lib/mocha-phantomjs.coffee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/metaskills/mocha-phantomjs/blob/master/lib/mocha-phantomjs/core_extensions.js"&gt;lib/mocha-phantomjs/core_extensions.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どこに置いてもいいんですが、今回の例ではtest/libディレクトリに設置しています。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hokaccha/mocha-phantom-travis-test/tree/master/test/lib"&gt;mocha-phantom-travis-test/test/lib&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そして&lt;code&gt;mocha.run()&lt;/code&gt;を実行するところを次のように書きます。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mochaPhantomJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mochaPhantomJS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mocha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;phantomJSから呼ぶ場合は&lt;code&gt;mochaPhantomJS.run()&lt;/code&gt;で実行、そうでない場合は通常の&lt;code&gt;mocha.run()&lt;/code&gt;でテストを実行するようにしています。&lt;/p&gt;

&lt;p&gt;これで以下のようにするとmochaのテストをコマンドラインから実行できます。&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ phantomjs test/lib/mocha-phantomjs.coffee test/index.html

  jquery.rollover
    ✓ mouseenterで_offが_onになること 
    ✓ mouseleaveで_onが_offになること 


  ✔ 2 tests complete (21 ms)
&lt;/pre&gt;
&lt;p&gt;ファイル名の後にreporterを指定することもできるので結果を&lt;code&gt;tap&lt;/code&gt;で出力することもできます。デフォルトは&lt;code&gt;spec&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;最後にtravis-ciの設定ですが、travis-ciはphantomJSをサポートしているので、.travis.ymlにその設定を以下のように書くだけです。&lt;/p&gt;
&lt;pre class="highlight text"&gt;script: phantomjs test/lib/mocha-phantomjs.coffee test/index.html
&lt;/pre&gt;
&lt;p&gt;これでtravis-ciのほうでこのリポジトリを追加してpushしたら自動でテストが走るようになります。簡単すぎワロタ。&lt;/p&gt;

&lt;p&gt;以下が結果です。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://travis-ci.org/#!/hokaccha/mocha-phantom-travis-test/builds/2862206"&gt;hokaccha/mocha-phantom-travis-test #1 | Travis CI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下はわざとコケるようにしてみたテストの結果です。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://travis-ci.org/#!/hokaccha/mocha-phantom-travis-test/builds/2862214"&gt;hokaccha/mocha-phantom-travis-test #2 | Travis CI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このようにtravis-ciを使うと簡単に自動テストできますが、phantomJSでテストできるところまでいけばあとはJenkinsでも同じようにできるはずです。&lt;/p&gt;

&lt;p&gt;便利な世の中になったものだと思いました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>「ノンプログラマのための JavaScriptはじめの一歩」という本を書きました</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/10/jsippo.html"/>
    <id>http://webtech-walker.com/archive/2012/10/jsippo.html</id>
    <published>2012-10-22T15:00:00Z</published>
    <updated>2012-10-22T15:00:00Z</updated>
    <content type="html">&lt;figure&gt;
  &lt;a href="http://amazon.jp/dp/4774153761"&gt;
  &lt;img src="/img/posts/2012-10-23-jsippo/cover.png" alt="ノンプログラマのための JavaScriptはじめの一歩" width="400" height="568"&gt;
  &lt;figcaption&gt;Amazon.co.jp： ノンプログラマのための JavaScriptはじめの一歩&lt;/figcaption&gt;
  &lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;2012/11/7に発売予定です。ハッシュタグは&lt;a href="https://twitter.com/search/realtime?q=%23jsippo"&gt;#jsippo&lt;/a&gt;なのでみなさんどうぞふるってツイートしてください。&lt;/p&gt;

&lt;h2&gt;想定している対象&lt;/h2&gt;

&lt;p&gt;タイトルからもわかるように、デザイナやマークアップエンジニアなどをやっていてプログラムはほとんどわからないというくらいの読者を想定しています。&lt;/p&gt;

&lt;p&gt;なので普段JavaScriptを書いている人や、他の言語をやっていて、JavaScriptを学んでみようと思っているような方にはもの足りない内容だと思います。そういう人は&lt;a href="http://www.amazon.co.jp/gp/product/4873115736?ie=UTF8&amp;amp;camp=1207&amp;amp;creative=8411&amp;amp;creativeASIN=4873115736&amp;amp;linkCode=shr&amp;amp;tag=webtech00-22"&gt;サイ本&lt;/a&gt;とか&lt;a href="http://www.amazon.co.jp/gp/product/477414813X?ie=UTF8&amp;amp;camp=1207&amp;amp;creative=8411&amp;amp;creativeASIN=477414813X&amp;amp;linkCode=shr&amp;amp;tag=webtech00-22&amp;amp;=books&amp;amp;qid=1350202385&amp;amp;sr=1-1"&gt;パーフェクトJavaScript&lt;/a&gt;を読みましょう。&lt;/p&gt;

&lt;p&gt;何を書いて何を書かないかというところの線引に苦労しました。たとえば変数のスコープやprototypeなどはJavaScriptを学ぶ上では避けて通れませんが、そこは敢えて説明を省いています。初めてプログラムを学ぶときにスコープがどうとか言われてもわからないので、そこを学ぶのは二歩目、三歩目からで十分だと思ったからです。でもこれを説明しないとアレが説明できないし・・みたいな葛藤もけっこうありました。&lt;/p&gt;

&lt;h2&gt;特徴&lt;/h2&gt;

&lt;p&gt;この書籍でおそらく一番特徴的なのは一つのサンプルプログラムを、一冊を通して解説するということです。そのプログラムは簡単なものでボタンを押すと予め用意しといた数枚の画像が切り替わる、簡易的なスライドショーのプログラムです。&lt;/p&gt;

&lt;p&gt;なぜこのような構成にしたかというと、ある機能を解説したとき、実際のプログラムでどのようにそれが使われるかがわかると、より深く理解ができると思ったからです。&lt;/p&gt;

&lt;p&gt;例えば「配列」というものを学んだ時に、配列がどういうものかなんとなくわかっても、それを使うと何がいいのか、実際のプログラムではどのように利用すればいいのかというところまで理解してほしいと思いました。なので、「配列」というものの解説をした後、実際にスライドショーのどこでどのように使われているかを解説しています。&lt;/p&gt;

&lt;p&gt;初学者向けなので、配列をつくるときに「どう書くか」はもちろん解説しますが、「どう使うか」というのをできるだけ感じてもらう配慮をしたつもりです。&lt;/p&gt;

&lt;p&gt;これまでこのような構成の本は見たことがないので（知らないだけかもしれないけど）、もしかしたら逆にわかりにくくなっているのではないかという不安もありますが、他にあまりない構成にできたし、うまくまとめられたと思うのでよかったと思っています。&lt;/p&gt;

&lt;p&gt;スライドショーのプログラムはjQueryを使わず書いていますが、実務で使うときにjQueryは避けて通れないので最後にjQueryについて解説し、スライドショーのプログラムをjQueryで書きなおしてブラッシュアップするという構成になっています。&lt;/p&gt;

&lt;h2&gt;イベント告知&lt;/h2&gt;

&lt;p&gt;出版記念イベントとしてジュンク堂さんで&lt;a href="http://twitter.com/takazudo"&gt;@takazudo&lt;/a&gt;さんと「ノンプログラマがJavaScriptを 学んでいくにはどうすればいいのか」というテーマでトークセッションします。興味があるかたはぜひご参加ください。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.junkudo.co.jp/tenpo/evtalk.html#20121122_talk"&gt;http://www.junkudo.co.jp/tenpo/evtalk.html#20121122_talk&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>gitで差分ファイルを抽出する</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/09/git_export_diff.html"/>
    <id>http://webtech-walker.com/archive/2012/09/git_export_diff.html</id>
    <published>2012-09-23T15:00:00Z</published>
    <updated>2012-09-23T15:00:00Z</updated>
    <content type="html">&lt;p&gt;変更したファイルだけまとめて取り出したいというケースがけっこうあるみたいなんで書いてみた。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/3764870"&gt;gitの差分のファイルをつくる — Gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こいつをパスが通ってるところに置いて実行権限つけたら&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ git export-diff &amp;lt;commit&amp;gt; &amp;lt;output_dir&amp;gt;
&lt;/pre&gt;
&lt;p&gt;こんな感じで実行すると&lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;からHEADまでの差分ファイルを&lt;code&gt;&amp;lt;output_dir&amp;gt;&lt;/code&gt;にコピーする。&lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;の部分は&lt;code&gt;git diff&lt;/code&gt;と同じ物が使えるので&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ git export-diff HEAD^^^ path/to/dir
$ git export-diff HEAD^^^..HEAD^ path/to/dir
$ git export-diff &amp;lt;sha1&amp;gt; &amp;lt;sha1&amp;gt; path/to/dir
$ git export-diff &amp;lt;sha1&amp;gt;..&amp;lt;sha1&amp;gt; path/to/dir
&lt;/pre&gt;
&lt;p&gt;みたいな感じでもOK。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>jQueryでアニメーション終了時のcallback</title>
    <link rel="alternate" href="http://webtech-walker.com/archive/2012/09/jquery_animate_callback.html"/>
    <id>http://webtech-walker.com/archive/2012/09/jquery_animate_callback.html</id>
    <published>2012-09-22T15:00:00Z</published>
    <updated>2012-09-22T15:00:00Z</updated>
    <content type="html">&lt;p&gt;jQueryでfadeOutとかのアニメーションして終わったらなんかするといったときにcallback関数を引数に指定するのとDeferred使う方法があるんだけどこの二つは挙動が違う。&lt;/p&gt;

&lt;p&gt;こういうHTMLがあったとして&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;foo&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;bar&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;baz&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;まず以下のようなcallback関数の場合はそれぞれのfadeOutが終わるごとに呼ばれる。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fadeOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;つまり&lt;code&gt;&amp;#39;fin&amp;#39;&lt;/code&gt;が3回出力される。&lt;/p&gt;

&lt;p&gt;一方Deferredを使った場合はこんな感じ。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fadeOut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.promise()&lt;/code&gt;がDeferredオブジェクトを返すので&lt;code&gt;.done&lt;/code&gt;に設定した関数がアニメーション終了時に呼ばれる。こっちは全てのアニメーションが終わった時点で呼ばれるので&lt;code&gt;&amp;#39;fin&amp;#39;&lt;/code&gt;は一回しか呼ばれない。という違いがあるみたい。&lt;/p&gt;
</content>
  </entry>
</feed>
